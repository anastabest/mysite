{"meta":{"title":"BLOG LEARNING PROGRAMMING","subtitle":"","description":"My first site on Hexo","author":"Anastabest","url":"https://anastabest.github.io/mysite","root":"/mysite/"},"pages":[{"title":"Numbers","date":"2020-04-09T07:55:06.000Z","updated":"2020-04-10T07:08:30.886Z","comments":true,"path":"Numbers/index.html","permalink":"https://anastabest.github.io/mysite/Numbers/index.html","excerpt":"","text":"NaN - не числоNaN является зарезервированным словом JavaScript, указывающим, что число не является допустимым числом. Попытка сделать арифметику с нечисловой строкой приведет к NaN(не число): 123&lt;script&gt;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; 100 &#x2F; &quot;Apple&quot;; &#x2F;&#x2F;&#x2F;&#x2F; x will be NaN (Not a Number)&lt;&#x2F;script&gt; Однако, если строка содержит числовое значение, результатом будет число Вы можете использовать глобальную функцию JavaScript, isNaN()чтобы узнать, является ли значение числом:1234&lt;script&gt;var x &#x3D; 100 &#x2F; &quot;Apple&quot;;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; isNaN(x); &#x2F;&#x2F;true&lt;&#x2F;script&gt; Берегись NaN. Если вы используете NaNв математической операции, результат также будет NaN: Или результатом может быть конкатенация:12345&lt;script&gt;var x &#x3D; NaN;var y &#x3D; &quot;5&quot;;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; x + y; &#x2F;&#x2F;NaN5&lt;&#x2F;script&gt; NaN это число: typeof NaN возвращает number:1234&lt;script&gt;var x &#x3D; NaN;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; typeof x; &#x2F;&#x2F;number&lt;&#x2F;script&gt; Бесконечность InfinityInfinity(или -Infinity) - это значение, которое JavaScript вернет, если вы вычислите число за пределами максимально возможного числа. 123456789&lt;script&gt;var myNumber &#x3D; 2; var txt &#x3D; &quot;&quot;;while (myNumber !&#x3D; Infinity) &#123; myNumber &#x3D; myNumber * myNumber; txt &#x3D; txt + myNumber + &quot;&lt;br&gt;&quot;;&#125;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; txt;&lt;&#x2F;script&gt; // 12345678910416256655364294967296184467440737095520003.402823669209385e+381.157920892373162e+771.3407807929942597e+154Infinity Infinity это число: typeof Infinity возвращает number. Числа могут быть объектами"},{"title":"STRINGS","date":"2020-04-08T12:47:33.000Z","updated":"2020-04-08T19:15:08.316Z","comments":true,"path":"Strings/index.html","permalink":"https://anastabest.github.io/mysite/Strings/index.html","excerpt":"","text":"Строки JavaScript Строки JavaScript используются для хранения и манипулирования текстом. Строка JavaScript содержит ноль или более символов, заключенных в кавычки. 12var carName1 &#x3D; &quot;Volvo XC60&quot;; &#x2F;&#x2F; Double quotesvar carName2 &#x3D; &#39;Volvo XC60&#39;; &#x2F;&#x2F; Single quotes Длина строки Чтобы найти длину строки, используйте встроенное lengthсвойство: 1234&lt;script&gt;var txt &#x3D; &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; txt.length;&lt;&#x2F;script&gt; Последовательность &quot; вставляет двойную кавычку в строку: 1234&lt;script&gt; &#x2F;&#x2F;Экранирующая последовательность \\ &quot;вставляет двойную кавычку в строку.var x &#x3D; &quot;We are the so-called \\&quot;Vikings\\&quot; from the north.&quot;; &#x2F;&#x2F;Мы так называемые &quot;викинги&quot; с севера.document.getElementById(&quot;demo&quot;).innerHTML &#x3D; x; &lt;&#x2F;script&gt; Последовательность &#39; вставляет одиночную кавычку в строку: 1234&lt;script&gt;var x &#x3D; &#39;It\\&#39;s alright.&#39;;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; x; &#x2F;&#x2F;It&#39;s alright.&lt;&#x2F;script&gt; Последовательность \\ вставляет в строку обратную косую черту: 1234&lt;script&gt;var x &#x3D; &quot;The character \\\\ is called backslash.&quot;;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; x; &#x2F;&#x2F;The character \\ is called backslash.&lt;&#x2F;script&gt; Шесть других escape-последовательностей допустимы в JavaScript \\b Backspaceвозврат на одну позицию \\f Form FeedПодача формы \\n New LineНовая линия \\r Carriage ReturnВозврат каретки \\t Horizontal TabulatorГоризонтальный табулятор \\v Vertical TabulatorВертикальный табулятор Прерывание длинных строк кода Если оператор JavaScript не помещается в одну строку, лучше всего его разбить после оператора:1234&lt;script&gt;document.getElementById(&quot;demo&quot;).innerHTML &#x3D;&quot;Hello Dolly!&quot;;&lt;&#x2F;script&gt; Вы также можете разбить строку кода внутри текстовой строки с помощью одной обратной косой черты:1234&lt;script&gt;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; &quot;Hello \\Dolly!&quot;;&lt;&#x2F;script&gt; Строки могут быть объектами Обычно строки JavaScript являются примитивными значениями, созданными из литералов: var firstName = “John”; Но строки также могут быть определены как объекты с ключевым словом new: var firstName = new String(“John”);1234567&lt;script&gt;var x &#x3D; &quot;John&quot;; &#x2F;&#x2F; x is a stringvar y &#x3D; new String(&quot;John&quot;); &#x2F;&#x2F; y is an objectdocument.getElementById(&quot;demo&quot;).innerHTML &#x3D;typeof x + &quot;&lt;br&gt;&quot; + typeof y; &lt;&#x2F;script&gt; При использовании ==оператора равные строки равны: 12345&lt;script&gt;var x &#x3D; &quot;John&quot;; &#x2F;&#x2F; x is a stringvar y &#x3D; new String(&quot;John&quot;); &#x2F;&#x2F; y is an objectdocument.getElementById(&quot;demo&quot;).innerHTML &#x3D; (x&#x3D;&#x3D;y);&lt;&#x2F;script&gt; При использовании ===оператора одинаковые строки не равны, поскольку ===оператор ожидает равенства как по типу, так и по значению. 12345&lt;script&gt;var x &#x3D; &quot;John&quot;; &#x2F;&#x2F; x is a stringvar y &#x3D; new String(&quot;John&quot;); &#x2F;&#x2F; y is an objectdocument.getElementById(&quot;demo&quot;).innerHTML &#x3D; (x&#x3D;&#x3D;&#x3D;y); &#x2F;&#x2F;false&lt;&#x2F;script&gt; Обратите внимание на разницу между (x==y)и (x===y).Сравнение двух объектов JavaScript всегда вернет false"},{"title":"JS Display","date":"2020-03-22T15:02:43.000Z","updated":"2020-03-23T15:18:51.677Z","comments":true,"path":"display/index.html","permalink":"https://anastabest.github.io/mysite/display/index.html","excerpt":"","text":"Отображение JAVA SCRIPTinnerHTMLdocument.write()window.alert()console.log()"},{"title":"JS Arrays","date":"2020-04-01T10:35:26.000Z","updated":"2020-04-11T19:56:09.894Z","comments":true,"path":"arrays/index.html","permalink":"https://anastabest.github.io/mysite/arrays/index.html","excerpt":"","text":"Массивы JavaScriptСоздание массиваСинтаксис: 1var array_name &#x3D; [item1, item2, ...]; Массивы JavaScript используются для хранения нескольких значений в одной переменной.1. 1234&lt;script&gt;var cars &#x3D; [&quot;Saab&quot;, &quot;Volvo&quot;, &quot;BMW&quot;];document.getElementById(&quot;demo&quot;).innerHTML &#x3D; cars; &#x2F;&#x2F;Saab,Volvo,BMW&lt;&#x2F;script&gt; 2. 12345var cars &#x3D; [ &quot;Saab&quot;, &quot;Volvo&quot;, &quot;BMW&quot;]; Использование ключевого слова JavaScript newсоздается массив и присваиваются ему значения: 1234&lt;script&gt;var cars &#x3D; new Array(&quot;Saab&quot;, &quot;Volvo&quot;, &quot;BMW&quot;);document.getElementById(&quot;demo&quot;).innerHTML &#x3D; cars;&lt;&#x2F;script&gt; Массив - это специальная переменная, которая может содержать более одного значения за раз.Если у вас есть список элементов (например, список имен автомобилей), хранение автомобилей в отдельных переменных может выглядеть следующим образом: var car1 = “Saab”; var car2 = “Volvo”; var car3 = “BMW”;Доступ к элементам массива Вы получаете доступ к элементу массива, ссылаясь на номер индекса . 1234&lt;script&gt;var cars &#x3D; [&quot;Saab&quot;, &quot;Volvo&quot;, &quot;BMW&quot;];document.getElementById(&quot;demo&quot;).innerHTML &#x3D; cars[0]; &#x2F;&#x2F;Saab&lt;&#x2F;script&gt; Изменение элемента массива12345&lt;script&gt;var cars &#x3D; [&quot;Saab&quot;, &quot;Volvo&quot;, &quot;BMW&quot;];cars[0] &#x3D; &quot;Opel&quot;;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; cars; &#x2F;&#x2F;Opel,VOlVO,BMW&lt;&#x2F;script&gt; Доступ к полному массивуС JavaScript, полный массив может быть доступен путем обращения к имени массива: 1234script&gt;var cars &#x3D; [&quot;Saab&quot;, &quot;Volvo&quot;, &quot;BMW&quot;];document.getElementById(&quot;demo&quot;).innerHTML &#x3D; cars; &#x2F;&#x2F;Saab,Volvo,BMw&lt;&#x2F;script&gt; Массивы являются объектамиМассивы - это особый тип объектов. typeofОператор в JavaScript возвращает «объект» для массивов. Объекты используют имена для доступа к своим «членам». В этом примере person.firstName возвращает John:12345&lt;script&gt;var person &#x3D; &#123;firstName:&quot;John&quot;, lastName:&quot;Doe&quot;, age:46&#125;;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; person[&quot;firstName&quot;]; &#x2F;&#x2F;John&lt;&#x2F;script&gt; Элементы массива могут быть объектами Переменные JavaScript могут быть объектами. Массивы - это особые виды объектов. Из-за этого вы можете иметь переменные разных типов в одном массиве. Вы можете иметь объекты в массиве. Вы можете иметь функции в массиве. Вы можете иметь массивы в массиве: 123myArray[0] &#x3D; Date.now;myArray[1] &#x3D; myFunction;myArray[2] &#x3D; myCars; Свойства и методы массивасила массивов JavaScript - это встроенные свойства и методы массива: 12var x &#x3D; cars.length; &#x2F;&#x2F; The length property returns the number of elementsvar y &#x3D; cars.sort(); &#x2F;&#x2F; The sort() method sorts arrays Свойство длиныlengthСвойство массива возвращает длину массива (количество элементов массива). 1234&lt;script&gt;var fruits &#x3D; [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];document.getElementById(&quot;demo&quot;).innerHTML &#x3D; fruits.length; &#x2F;&#x2F;4&lt;&#x2F;script&gt; Доступ к первому элементу массива 12345&lt;script&gt;var fruits &#x3D; [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];var first &#x3D; fruits[0];document.getElementById(&quot;demo&quot;).innerHTML &#x3D; first;&lt;&#x2F;script&gt; Доступ к последнему элементу массива 12345&lt;script&gt;var fruits &#x3D; [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];var last &#x3D; fruits[fruits.length-1];document.getElementById(&quot;demo&quot;).innerHTML &#x3D; last; &#x2F;&#x2F;Mango&lt;&#x2F;script&gt; Looping Array Elements(образование петель)Самый безопасный способ перебрать массив - использовать for цикл: 12345678910111213&lt;script&gt;var fruits, text, fLen, i;fruits &#x3D; [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];fLen &#x3D; fruits.length;text &#x3D; &quot;&lt;ul&gt;&quot;;for (i &#x3D; 0; i &lt; fLen; i++) &#123; text +&#x3D; &quot;&lt;li&gt;&quot; + fruits[i] + &quot;&lt;&#x2F;li&gt;&quot;;&#125;text +&#x3D; &quot;&lt;&#x2F;ul&gt;&quot;;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; text; &lt;&#x2F;script&gt; вывод: (не нумерованный список) 1234* Banana* Orange* Apple* Mango Вы также можете использовать Array.forEach()функцию: 12345678910111213&lt;script&gt;var fruits, text;fruits &#x3D; [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];text &#x3D; &quot;&lt;ul&gt;&quot;;fruits.forEach(myFunction);text +&#x3D; &quot;&lt;&#x2F;ul&gt;&quot;;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; text;function myFunction(value) &#123; text +&#x3D; &quot;&lt;li&gt;&quot; + value + &quot;&lt;&#x2F;li&gt;&quot;;&#125; &lt;&#x2F;script&gt; 1234* Banana* Orange* Apple* Mango Добавление элементов массиваСамый простой способ добавить новый элемент в массив - использовать push() метод: 123456789&lt;script&gt;var fruits &#x3D; [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];document.getElementById(&quot;demo&quot;).innerHTML &#x3D; fruits;function myFunction() &#123; fruits.push(&quot;Lemon&quot;); document.getElementById(&quot;demo&quot;).innerHTML &#x3D; fruits; &#x2F;&#x2F;Banana,Orange,Apple,Mango,Lemon&#125;&lt;&#x2F;script&gt; Новый элемент также можно добавить в массив, используя lengthсвойство: 123456789&lt;script&gt;var fruits &#x3D; [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];document.getElementById(&quot;demo&quot;).innerHTML &#x3D; fruits;function myFunction() &#123; fruits[fruits.length] &#x3D; &quot;Lemon&quot;; document.getElementById(&quot;demo&quot;).innerHTML &#x3D; fruits; &#x2F;&#x2F;Banana,Orange,Apple,Mango,Lemon&#125;&lt;&#x2F;script&gt; Ассоциативные массивыМассивы с именованными индексами называются ассоциативными массивами (или хэшами). JavaScript не поддерживает массивы с именованными индексами. В JavaScript массивы всегда используют пронумерованные индексы 12345678&lt;script&gt;var person &#x3D; [];person[0] &#x3D; &quot;John&quot;;person[1] &#x3D; &quot;Doe&quot;;person[2] &#x3D; 46; document.getElementById(&quot;demo&quot;).innerHTML &#x3D;person[0] + &quot; &quot; + person.length; &#x2F;&#x2F;John 3&lt;&#x2F;script&gt; // person.length will return 3// person[0] will return “John” Разница между массивами и объектамиВ JavaScript массивы используют пронумерованные индексы . В JavaScript объекты используют именованные индексы . 1Массивы - это особый вид объектов с пронумерованными индексами. Когда использовать массивы. Когда использовать объекты. JavaScript не поддерживает ассоциативные массивы. Вы должны использовать объекты, когда вы хотите, чтобы имена элементов были строками (текст) . Вы должны использовать массивы, когда хотите, чтобы имена элементов были числами .Избегайте нового массива () Нет необходимости использовать встроенный в JavaScript конструктор newмассива Array (). Используйте [ ] вместо этого. Эти два разных оператора создают новый пустой массив с именем points: var points = new Array( ); // Badvar points = [ ]; // Good Эти два разных оператора создают новый массив, содержащий 6 чисел: 12345&lt;script&gt;&#x2F;&#x2F;var points &#x3D; new Array(40, 100, 1, 5, 25, 10); &#x2F;&#x2F;badvar points &#x3D; [40, 100, 1, 5, 25, 10]; &#x2F;&#x2F;gooddocument.getElementById(&quot;demo&quot;).innerHTML &#x3D; points[0]; &#x2F;&#x2F;40&lt;&#x2F;script&gt; Как распознать массивПроблема в том, что оператор JavaScript typeofвозвращает “ object”: 1234&lt;script&gt;var fruits &#x3D; [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];document.getElementById(&quot;demo&quot;).innerHTML &#x3D; typeof fruits; &#x2F;&#x2F;object&lt;&#x2F;script&gt; потому что массив JavaScript является объектом. Для решения этой проблемы ECMAScript 5 определяет новый метод Array.isArray():1234&lt;script&gt;var fruits &#x3D; [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];document.getElementById(&quot;demo&quot;).innerHTML &#x3D; Array.isArray(fruits); &#x2F;&#x2F;true&lt;&#x2F;script&gt; Для решения этой проблемы вы можете создать свою собственную isArray()функцию: 12345678&lt;script&gt;var fruits &#x3D; [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];document.getElementById(&quot;demo&quot;).innerHTML &#x3D; isArray(fruits);function isArray(myArray) &#123; return myArray.constructor.toString().indexOf(&quot;Array&quot;) &gt; -1; &#x2F;&#x2F;true&#125;&lt;&#x2F;script&gt; Вышеприведенная функция всегда возвращает true, если аргумент является массивом. instanceofОператор возвращает истину , если объект создается с помощью данного конструктора:1234&lt;script&gt;var fruits &#x3D; [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];document.getElementById(&quot;demo&quot;).innerHTML &#x3D; fruits instanceof Array; &#x2F;&#x2F; true&lt;&#x2F;script&gt;"},{"title":"About team","date":"2020-03-03T21:00:36.000Z","updated":"2020-03-03T21:28:25.781Z","comments":true,"path":"aboutTeam/index.html","permalink":"https://anastabest.github.io/mysite/aboutTeam/index.html","excerpt":"","text":"We are professional photographers"},{"title":"JavaScript","date":"2020-03-10T15:33:33.000Z","updated":"2020-03-10T16:00:12.859Z","comments":true,"path":"javascript/index.html","permalink":"https://anastabest.github.io/mysite/javascript/index.html","excerpt":"","text":"Java Script* &lt;script&gt; document.getElementById(\"demo\").innerHTML = \"My First JavaScript\"; &lt;/script&gt; * ## The &lt;script&gt; Tag"},{"title":"Data Types   Типы Данных","date":"2020-03-31T09:32:03.000Z","updated":"2020-04-08T07:24:28.777Z","comments":true,"path":"DataTypes/index.html","permalink":"https://anastabest.github.io/mysite/DataTypes/index.html","excerpt":"","text":"Переменные JavaScript : числа, строки, объекты и многое другое:var length = 16; // Number var lastName = &quot;Johnson&quot;; // String var x = {firstName:&quot;John&quot;, lastName:&quot;Doe&quot;}; // ObjectОбъекты могут быть очищены путем установки значения в NULL.&lt;script&gt; var person = {firstName:&quot;John&quot;, lastName:&quot;Doe&quot;, age:50, eyeColor:&quot;blue&quot;}; person = null; document.getElementById(&quot;demo&quot;).innerHTML = typeof person; &lt;/script&gt; // objectКонцепция:— При добавлении числа и строки JavaScript будет обрабатывать число как строку &lt;script&gt; var x = 16 + &quot;Volvo&quot;; document.getElementById(&quot;demo&quot;).innerHTML = x; &lt;/script&gt; // 16Volvo &lt;script&gt; var x = &quot;Volvo&quot; + 16; document.getElementById(&quot;demo&quot;).innerHTML = x; &lt;/script&gt; // Volvo16 ——JavaScript оценивает выражения слева направо. Разные последовательности могут давать разные результаты: &lt;script&gt; var x = 16 + 4 + &quot;Volvo&quot;; document.getElementById(&quot;demo&quot;).innerHTML = x; &lt;/script&gt; // 20Volvo &lt;script&gt; var x = &quot;Volvo&quot; + 16 + 4; document.getElementById(&quot;demo&quot;).innerHTML = x; &lt;/script&gt; // Volvo164Типы JavaScript являются динамическими одна и та же переменная может использоваться для хранения разных типов данных: &lt;script&gt; var x; // Now x is undefined x = 5; // Now x is a Number x = &quot;John&quot;; // Now x is a String document.getElementById(&quot;demo&quot;).innerHTML = x; &lt;/script&gt;Строки JavaScriptСтрока (или текстовая строка) - это серия символов &lt;script&gt; var carName1 = &quot;Volvo XC60&quot;; // Using double quotes var carName2 = &apos;Volvo XC60&apos;; // Using single quotes document.getElementById(&quot;demo&quot;).innerHTML = carName1 + &quot;&lt;br&gt;&quot; + carName2; &lt;/script&gt; // Volvo XC60 // Volvo XC60 JavaScript имеет только один тип чисел. Числа могут быть записаны с десятичными знаками или без них JavaScript BooleansЛогические значения могут иметь только два значения:true или false. 1234567&lt;script&gt;var x &#x3D; 5; var y &#x3D; 5; &#x2F;&#x2F; Returns true var z &#x3D; 6; &#x2F;&#x2F; Returns falsedocument.getElementById(&quot;demo&quot;).innerHTML &#x3D;(x &#x3D;&#x3D; y) + &quot;&lt;br&gt;&quot; + (x &#x3D;&#x3D; z);&lt;&#x2F;script&gt; Массивы JavaScriptМассивы JavaScript написаны в квадратных скобках.Элементы массива разделяются запятыми. &lt;script&gt; var cars = [&quot;Saab&quot;,&quot;Volvo&quot;,&quot;BMW&quot;]; document.getElementById(&quot;demo&quot;).innerHTML = cars[0]; &lt;/script&gt; // SaabИндексы массива начинаются с нуля, что означает, что первым элементом является [0]. JavaScript объектыОбъекты JavaScript пишутся с помощью фигурных скобок {}. Свойства объекта записываются в виде пар имя: значение, разделенных запятыми. &lt;script&gt; var person = { firstName : &quot;John&quot;, lastName : &quot;Doe&quot;, age : 50, eyeColor : &quot;blue&quot; }; document.getElementById(&quot;demo&quot;).innerHTML = person.firstName + &quot; is &quot; + person.age + &quot; years old.&quot;; // John is 50 years old. &lt;/script&gt;Тип оператораtypeof Оператор возвращает тип переменной или выражением:&lt;script&gt;s document.getElementById(&quot;demo&quot;).innerHTML = typeof &quot;&quot; + &quot;&lt;br&gt;&quot; + typeof &quot;John&quot; + &quot;&lt;br&gt;&quot; + string typeof &quot;John Doe&quot;; //Returnsstring &lt;/script&gt; //Returns string //Returns string&lt;script&gt; document.getElementById(&quot;demo&quot;).innerHTML = typeof 0 + &quot;&lt;br&gt;&quot; + //number typeof 314 + &quot;&lt;br&gt;&quot; + //number typeof 3.14 + &quot;&lt;br&gt;&quot; + //number typeof (3) + &quot;&lt;br&gt;&quot; + //number typeof (3 + 4); //number &lt;/script&gt;Значение UNDEFINED typeof undefinedВ JavaScript переменная без значения имеет: значение undefined. Тип тоже undefined.&lt;script&gt; var car; document.getElementById(&quot;demo&quot;).innerHTML = car + &quot;&lt;br&gt;&quot; + typeof car; // undefined &lt;/script&gt; // undefined Любую переменную можно очистить, установив значение в undefined. Тип тоже будет undefined. Значение NULL typeof objectВ JavaScript null это «ничего». Что-то, чего не существует.typeof null является объектом очистить объект, установив его в null&lt;script&gt; var person = {firstName:&quot;John&quot;, lastName:&quot;Doe&quot;, age:50, eyeColor:&quot;blue&quot;}; person = null; document.getElementById(&quot;demo&quot;).innerHTML = typeof person; &lt;/script&gt; // objectundefined и null равны по значению, но различаются по типу очистить объект, установив его в undefined&lt;script&gt; var person = {firstName:&quot;John&quot;, lastName:&quot;Doe&quot;, age:50, eyeColor:&quot;blue&quot;}; person = undefined; document.getElementById(&quot;demo&quot;).innerHTML = person; &lt;/script&gt; // undefinedtypeof undefined // undefined typeof null // object null === undefined // false null == undefined // trueПримитивное значение данных это одно простое значение данных без дополнительных свойств и методов. typeof oператор возвращает один из этих примитивных типов: string number boolean undefined&lt;script&gt; document.getElementById(&quot;demo&quot;).innerHTML = typeof &quot;john&quot; + &quot;&lt;br&gt;&quot; + // string typeof 3.14 + &quot;&lt;br&gt;&quot; + // number typeof true + &quot;&lt;br&gt;&quot; + // boolean typeof false + &quot;&lt;br&gt;&quot; + // boolean typeof x; // undefined &lt;/script&gt; Комплексные данные Complex Data (returns)typeof oператор может возвращать одно из двух сложных типов: function object typeof возвращает оператор «объект» для объектов, массивов, и нуля. typeof оператор не возвращает «объект» для функций. &lt;script&gt; document.getElementById(&quot;demo&quot;).innerHTML = typeof {name:&apos;john&apos;, age:34} + &quot;&lt;br&gt;&quot; + // object typeof [1,2,3,4] + &quot;&lt;br&gt;&quot; + // object typeof null + &quot;&lt;br&gt;&quot; + // object typeof function myFunc(){}; // function &lt;/script&gt;"},{"title":"EVENTS","date":"2020-04-08T10:56:46.000Z","updated":"2020-04-08T12:02:09.654Z","comments":true,"path":"Events/index.html","permalink":"https://anastabest.github.io/mysite/Events/index.html","excerpt":"","text":"События JavaScript Когда JavaScript используется на страницах HTML, JavaScript может «реагировать» на эти события. HTML событияHTML-событие может быть тем, что делает браузер, или тем, что делает пользователь.Несколько примеров событий HTML: HTML-страница закончила загрузку Поле ввода HTML было изменено Была нажата кнопка HTMLВ приведенном выше примере код JavaScript изменяет содержимое элемента с помощью id = “demo”.1&lt;button onclick&#x3D;&quot;document.getElementById(&#39;demo&#39;).innerHTML&#x3D;Date()&quot;&gt;The time is?&lt;&#x2F;button&gt; В следующем примере код изменяет содержимое своего собственного элемента (используя this.innerHTML):1&lt;button onclick&#x3D;&quot;this.innerHTML&#x3D;Date()&quot;&gt;The time is?&lt;&#x2F;button&gt; Чаще встречаются атрибуты событий, вызывающие функции:1234567&lt;button onclick&#x3D;&quot;displayDate()&quot;&gt;The time is?&lt;&#x2F;button&gt;&lt;script&gt;function displayDate() &#123; document.getElementById(&quot;demo&quot;).innerHTML &#x3D; Date();&#125;&lt;&#x2F;script&gt; &#x2F;&#x2F;Wed Apr 08 2020 14:48:30 GMT+0300 (за східноєвропейським літнім часом) Common HTML Events / Общие события HTMLEvents &lt;onchange&gt; по изменению… HTML-элемент был изменен&lt;onclick&gt; по щелчку… Пользователь щелкает элемент HTML&lt;onmouseover&gt; при наведении курсора на… Пользователь наводит указатель мыши на элемент HTML&lt;onmouseout&gt; Пользователь наводит указатель мыши на элемент HTML&lt;onKeyDown&gt; Пользователь наводит указатель мыши на элемент HTML&lt;onload&gt; в процессе Браузер завершил загрузку страницы Что может сделать JavaScript?Обработчики событий могут использоваться для обработки и проверки пользовательского ввода, действий пользователя и действий браузера: Что нужно делать каждый раз, когда загружается страница Что нужно сделать, когда страница закрыта Действие, которое должно быть выполнено, когда пользователь нажимает кнопку Контент, который должен быть проверен, когда пользователь вводит данные И более … Можно использовать много разных методов, чтобы JavaScript мог работать с событиями: Атрибуты событий HTML могут выполнять код JavaScript напрямую Атрибуты событий HTML могут вызывать функции JavaScript Вы можете назначить свои собственные функции обработчика событий элементам HTML Вы можете предотвратить отправку или обработку событий И более …"},{"title":"Java Script Keywords **ключевые слова**","date":"2020-03-23T11:56:14.000Z","updated":"2020-03-23T15:16:23.277Z","comments":true,"path":"keywords/index.html","permalink":"https://anastabest.github.io/mysite/keywords/index.html","excerpt":"","text":""},{"title":"NUMBER METHODS","date":"2020-04-10T07:08:26.000Z","updated":"2020-04-10T07:50:14.491Z","comments":true,"path":"numberMethods/index.html","permalink":"https://anastabest.github.io/mysite/numberMethods/index.html","excerpt":"","text":"Числовые методыЧисловые методы помогут работать с числами. Числовые методы и свойстваS"},{"title":"Gift certificate","date":"2020-03-03T21:58:34.000Z","updated":"2020-03-03T22:20:44.052Z","comments":true,"path":"products/index.html","permalink":"https://anastabest.github.io/mysite/products/index.html","excerpt":"","text":"The photo session is held in the awesome professional VIP photo studio in Kiev, where you can design any environment;Makeup (1 image) and accompaniment of a makeup artist during the entire photo shoot will allow a woman to feel irresistible and unique every second of shooting, which will be confirmed by highly artistic pictures;After the photo shoot, the charming client receives a CD with photos in JPG format after professional post-processing, as well as all the drafts (yes, I transmit all the captured material);"},{"title":"randomNotes","date":"2020-03-21T10:23:14.000Z","updated":"2020-03-24T20:53:43.193Z","comments":true,"path":"randonNotes/index.html","permalink":"https://anastabest.github.io/mysite/randonNotes/index.html","excerpt":"","text":"DEPLOY"},{"title":"метод  getElementById().","date":"2020-02-28T09:47:26.000Z","updated":"2020-04-04T17:57:39.077Z","comments":true,"path":"about/index.html","permalink":"https://anastabest.github.io/mysite/about/index.html","excerpt":"","text":"Java Script ## Скриптовый языкСкриптова мова (англ. scripting language) — мова програмування, розроблена для запису «сценаріїв», послідовностей операцій, які користувач може виконувати на комп’ютері. Динамі́чна мо́ва!Динамі́чна мо́ва дозволяє визначати типи даних і здійснювати синтаксичний аналіз і компіляцію «на льоту», безпосередньо на етапі виконання. Метод JavaScript HTML является getElementById(). Метод используется для «поиска» HTML-элемента (с id = «demo») и изменения элемента content ( innerHTML) на «Hello JavaScript» пример&lt;p id=&quot;demo&quot;&gt;JavaScript can change HTML content.&lt;/p&gt; &lt;button type=&quot;button&quot; onclick=&apos;document.getElementById(&quot;demo&quot;).innerHTML = &quot;Hello JavaScript!&quot;&apos;&gt;Click Me!&lt;/button&gt; при нажатии кнопки меняется текст; Атрибуты Все элементы HTML могут иметь атрибуты Атрибуты предоставляют дополнительную информацию об элементе Атрибуты всегда указываются в начальном теге Атрибуты обычно входят в пары имя / значение, такие как: name = “value” Атрибут href &lt;a href=&quot;https://www.w3schools.com&quot;&gt;This is a link&lt;/a&gt;Атрибут src &lt;img src=&quot;img_girl.jpg&quot;&gt;Атрибут width и height &lt;img src=&quot;img_girl.jpg&quot; width=&quot;500&quot; height=&quot;600&quot;&gt;Атрибут alt &lt;img src=&quot;img_girl.jpg&quot; alt=&quot;Girl with a jacket&quot;&gt;Атрибут style &lt;p style=&quot;color:red&quot;&gt;This is a red paragraph.&lt;/p&gt; style Атрибут используется для указания стиля элемента, как цвет, шрифт, размер и т.дАтрибут заголовка title 123&lt;p title&#x3D;&quot;I&#39;m a tooltip&quot;&gt;Mouse over this paragraph, to display the title attribute as a tooltip.&lt;&#x2F;p&gt; Атрибут lang 12345678&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en-US&quot;&gt;&lt;body&gt;...&lt;&#x2F;body&gt;&lt;&#x2F;html&gt; Вложенные элементы HTMLЭлементы HTML могут быть вложенными (элементы могут содержать элементы). Все документы HTML состоят из вложенных элементов HTML. Этот пример содержит четыре элемента HTML: 123456789&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&lt;h1&gt;My First Heading&lt;&#x2F;h1&gt;&lt;p&gt;My first paragraph.&lt;&#x2F;p&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt; JavaScript может изменять значения атрибутов HTML&lt;button onclick=&quot;document.getElementById(&apos;myImage&apos;).src=&apos;pic_bulbon.gif&apos;&quot;&gt;Turn on the light&lt;/button&gt; &lt;img id=&quot;myImage&quot; src=&quot;pic_bulboff.gif&quot; style=&quot;width:100px&quot;&gt; &lt;button onclick=&quot;document.getElementById(&apos;myImage&apos;).src=&apos;pic_bulboff.gif&apos;&quot;&gt;Turn off the light&lt;/button&gt; В этом примере JavaScript изменяет значение src атрибута (source) тега: Изменение стиля элемента HTML - это вариант изменения атрибута HTML&lt;p id=&quot;demo&quot;&gt;JavaScript can change the style of an HTML element.&lt;/p&gt; &lt;button type=&quot;button&quot; onclick=&quot;document.getElementById(&apos;demo&apos;).style.fontSize=&apos;35px&apos;&quot;&gt;Click Me!&lt;/button&gt; Может скрывать элементы&lt;button type=&quot;button&quot; onclick=&quot;document.getElementById(&apos;demo&apos;).style.display=&apos;none&apos;&quot;&gt;Click Me!&lt;/button&gt;Может отображать элементы&lt;p&gt;JavaScript can show hidden HTML elements.&lt;/p&gt; &lt;p id=&quot;demo&quot; style=&quot;display:none&quot;&gt;Hello JavaScript!&lt;/p&gt; &lt;button type=&quot;button&quot; onclick=&quot;document.getElementById(&apos;demo&apos;).style.display=&apos;block&apos;&quot;&gt;Click Me!&lt;/button&gt;"},{"title":"STRING METHODS","date":"2020-04-08T14:40:05.000Z","updated":"2020-04-09T07:53:33.512Z","comments":true,"path":"stringMethods/index.html","permalink":"https://anastabest.github.io/mysite/stringMethods/index.html","excerpt":"","text":"Строковые методы JavaScript Строковые методы помогают вам работать со строками Поиск строки в строкеДва метода,indexOf() и search(), равны? Они принимают одинаковые аргументы (параметры) и возвращают одно и то же значение? Два метода НЕ равны. Это различия: search()Метод не может принимать второй аргумент позиции начала. indexOf()Метод не может принимать мощные значения поиска (регулярные выражения). Извлечение string частей3 метода для извлечения части строки: slice(start, end) substring(start, end) substr(start, length) The slice() Method12345&lt;script&gt;var str &#x3D; &quot;Apple, Banana, Kiwi&quot;;var res &#x3D; str.slice(7,13);document.getElementById(&quot;demo&quot;).innerHTML &#x3D; res; &#x2F;&#x2F;Banana&lt;&#x2F;script&gt; slice() извлекает часть строки и возвращает извлеченную часть в новой строке. Метод принимает 2 параметра: начальную позицию и конечную позицию (конечная позиция не включена). 1Помните: JavaScript считает позиции с нуля. Первая позиция 0. Если вы опустите второй параметр, метод будет вырезать остальную часть строки: 12345&lt;script&gt;var str &#x3D; &quot;Apple, Banana, Kiwi&quot;;var res &#x3D; str.slice(7);document.getElementById(&quot;demo&quot;).innerHTML &#x3D; res; &#x2F;&#x2F;Banana, Kiwi&lt;&#x2F;script&gt; считая с конца: 12345&lt;script&gt;var str &#x3D; &quot;Apple, Banana, Kiwi&quot;;var res &#x3D; str.slice(-12) document.getElementById(&quot;demo&quot;).innerHTML &#x3D; res; &#x2F;&#x2F;&#x2F;&#x2F;Banana, Kiwi&lt;&#x2F;script&gt; Метод подстроки ()substring() похоже на slice(). Разница в том, что substring() нельзя принимать отрицательные показатели. Метод substr ()substr() похоже на slice().Разница в том, что второй параметр указывает длину извлеченной части. 12345&lt;script&gt;var str &#x3D; &quot;Apple, Banana, Kiwi&quot;;var res &#x3D; str.substr(7,6);document.getElementById(&quot;demo&quot;).innerHTML &#x3D; res; &#x2F;&#x2F;Banana&lt;&#x2F;script&gt; Метод substr () извлекает часть строки и возвращает извлеченные части в новой строке. Если вы пропустите второй параметр, substr()будет вырезана остальная часть строки. 12345&lt;script&gt;var str &#x3D; &quot;Apple, Banana, Kiwi&quot;;var res &#x3D; str.substr(7);document.getElementById(&quot;demo&quot;).innerHTML &#x3D; res; &#x2F;&#x2F;Banana,Kiwi&lt;&#x2F;script&gt; Если первый параметр отрицателен, позиция отсчитывается от конца строки. 12345&lt;script&gt;var str &#x3D; &quot;Apple, Banana, Kiwi&quot;;var res &#x3D; str.substr(-4);document.getElementById(&quot;demo&quot;).innerHTML &#x3D; res; &#x2F;&#x2F;Kiwi&lt;&#x2F;script&gt; Замена содержимого строкиreplace() Метод заменяет указанное значение с другим значением в строке &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;body&gt; &lt;h2&gt;JavaScript String Methods&lt;/h2&gt; &lt;p&gt;Replace &quot;Microsoft&quot; with &quot;W3Schools&quot; in the paragraph below:&lt;/p&gt; &lt;button onclick=&quot;myFunction()&quot;&gt;Try it&lt;/button&gt; &lt;p id=&quot;demo&quot;&gt;Please visit Microsoft!&lt;/p&gt; &lt;script&gt; function myFunction() { var str = document.getElementById(&quot;demo&quot;).innerHTML; var txt = str.replace(&quot;Microsoft&quot;,&quot;W3Schools&quot;); document.getElementById(&quot;demo&quot;).innerHTML = txt; } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; По умолчанию replace() метод заменяет только первое совпадение. Метод concat ()concat() объединяет две или более строки: var text1 = \"Hello\"; var text2 = \"World!\"; var text3 = text1.concat(\" \",text2); document.getElementById(\"demo\").innerHTML = text3; //Hello World! concat() Метод может быть использован вместо оператора плюс. Эти две строки делают то же самое: var text = “Hello” + “ “ + “World!”;var text = “Hello”.concat(“ “, “World!”); String.trim ()trim() метод удаляет пробельные символы с обеих сторон строки: Извлечение строковых символов charAt(position) charCodeAt(position) Property access [ ] Метод charAt ()charAt() Метод возвращает символ по указанному индексу (позиции) в строке: &lt;script&gt; var str = &quot;HELLO WORLD&quot;; document.getElementById(&quot;demo&quot;).innerHTML = str.charAt(0); //return H; &lt;/script&gt; Преобразование строки в массивsplit() метода может преобразовать строку в массив &lt;button onclick=&quot;myFunction()&quot;&gt;Try it&lt;/button&gt; &lt;p id=&quot;demo&quot;&gt;&lt;/p&gt; &lt;script&gt; function myFunction() { var str = &quot;a,b,c,d,e,f&quot;; var arr = str.split(&quot;,&quot;); document.getElementById(&quot;demo&quot;).innerHTML = arr[0]; //a } &lt;/script&gt;"},{"title":"Js Statements","date":"2020-03-23T04:12:43.000Z","updated":"2020-03-23T11:47:15.100Z","comments":true,"path":"statements/index.html","permalink":"https://anastabest.github.io/mysite/statements/index.html","excerpt":"","text":"Statements (операторы)&lt;script&gt; var x, y, z; // Statement 1 x = 5; // Statement 2 y = 6; // Statement 3 z = x + y; // Statement 4 document.getElementById(&quot;demo&quot;).innerHTML = &quot;The value of z is &quot; + z + &quot;.&quot;; &lt;/script&gt;Программа на JavaScript - список операторов- инструкций. ЗаявленияОператоры JavaScript состоят из: Значения операторы выражения ключевые слова комментарии Это утверждение говорит браузеру написать «Hello Dolly». внутри элемента HTML с id = “demo” &lt;p id=&quot;demo&quot;&gt;&lt;/p&gt; &lt;script&gt; document.getElementById(&quot;demo&quot;).innerHTML= &quot;Hello Dolly.&quot;; // JS получает доступ к элементу HTML, через метод **inerr.HTML**** &lt;/script&gt;Блоки кода в function(){…}Операторы кода группируются в блоки кода {…} внутри фигурных скобок.Блоки кода групируют операторы , которые выполняются вместе.*сгруппированные по блокам, в функциях JavaScript: function myFunction() { document.getElementById(“demo1”).innerHTML = “Hello Dolly!”; //используем два пробела для кода; document.getElementById(“demo2”).innerHTML = “How are you?”; }"},{"title":"JS Values","date":"2020-03-23T15:18:20.000Z","updated":"2020-03-23T15:30:30.591Z","comments":true,"path":"values/index.html","permalink":"https://anastabest.github.io/mysite/values/index.html","excerpt":"","text":"типы значений: фиксированные значения - ЛИТЕРАЛЫЧисла пишутся с десятичными знаками или без них (10.50 , 1001)Строки - это текст, написанный в двойных или одинарных кавычках: (“John Doe”) значения переменных - ПЕРЕМЕННЫЕ"},{"title":"OBJECTS","date":"2020-04-04T18:56:18.000Z","updated":"2020-04-06T14:02:33.751Z","comments":true,"path":"objects/index.html","permalink":"https://anastabest.github.io/mysite/objects/index.html","excerpt":"","text":"Объект - это набор связанных данных и / или функциональных возможностей Состоят из нескольких переменных и функций(свойства и методы), когда они находятся внутри объектов. Все автомобили имеют одинаковые свойства , но значения свойств отличаются от автомобиля к автомобилю object автомобиль свойства - вес и цвет методы - запуск и остановка В JavaScript большинство вещей являются объектами, от основных функций JavaScript, таких как строки и массивы,д о API-интерфейсов браузера, построенных на основе JavaScript. Вы даже можете создавать свои собственные объекты для инкапсуляции связанных функций и переменных в эффективные пакеты и действовать как удобные контейнеры данных."},{"title":"FUNCTIONS JAVA SCRIPT","date":"2020-03-21T23:08:13.000Z","updated":"2020-04-04T18:55:10.252Z","comments":true,"path":"functions/index.html","permalink":"https://anastabest.github.io/mysite/functions/index.html","excerpt":"","text":"function - это блок кода, предназначенный для выролнения конкретной задачи. Выполняется function когда что-то ее вызывает. Ключевое слово function может использоваться для определения функции внутри выражения. Можно определять функции используя конструктор Functiоn и объявление функции.(function declaration) 123456789&lt;script&gt;function myFunction(p1, p2) &#123; return p1 * p2;&#125;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; myFunction(4, 3);&lt;&#x2F;script&gt; &#x2F;&#x2F; 12&#x2F;&#x2F; В этом примере вызывается функция, которая выполняет вычисление и возвращает результат: Синтаксис функции JavaScriptfunction ключевое слово, потом следует имя , потом следуют скобки () 123function name(parameter1, parameter2, parameter3) &#123; &#x2F;&#x2F; код для выполнения&#125; Параметры функции указаны в скобках () в определении функции. Аргументы функции - это значения, полученные функцией при ее вызове. Вызов функцииКод внутри функции будет выполняться , когда «что-то» вызывает (calls) функцию: (invokes calls) Когда происходит событие (когда пользователь нажимает кнопку) Когда он вызывается (calls) из кода JavaScript Автоматически (самостоятельно вызывается) Возврат функцииRETURN оператораКогда JavaScript достигает return оператора, функцияпрекращает выполнение. Если функция была вызвана из оператора, JavaScript «вернется» для выполнения кода после вызова оператора. Функции часто вычисляют возвращаемое значение . Возвращаемое значение «возвращается» обратно «вызывающему»: 12345678&lt;script&gt;var x &#x3D; myFunction(4, 3);document.getElementById(&quot;demo&quot;).innerHTML &#x3D; x;function myFunction(a, b) &#123; return a * b;&#125;&lt;&#x2F;script&gt; &#x2F;&#x2F;12 можно повторно использовать код: определите код один раз и используйте его много раз, с разными аргументами, чтобы получить разные результаты. 123456&lt;script&gt;function toCelsius(f) &#123; return (5&#x2F;9) * (f-32);&#125;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; toCelsius(77);&lt;&#x2F;script&gt; &#x2F;&#x2F;25 Оператор () вызывает функциюtoCelsiusссылается на объект функции и toCelsius()ссылается на результат функции. 123456&lt;script&gt;function toCelsius(f) &#123; return (5&#x2F;9) * (f-32);&#125;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; toCelsius;&lt;&#x2F;script&gt; &#x2F;&#x2F;function toCelsius(f) &#123; return (5&#x2F;9) * (f-32); &#125; Функции, используемые в качестве переменныхФункции можно использовать так же, как вы используете переменные, во всех типах формул, назначений и вычислений. 1234567Вместо использования переменной для хранения возвращаемого значения функции:var x &#x3D; toCelsius(77);var text &#x3D; &quot;The temperature is &quot; + x + &quot; Celsius&quot;;Вы можете использовать функцию напрямую, как значение переменной:var text &#x3D; &quot;The temperature is &quot; + toCelsius(77) + &quot; Celsius&quot;; 12345678&lt;script&gt;document.getElementById(&quot;demo&quot;).innerHTML &#x3D;&quot;The temperature is &quot; + toCelsius(77) + &quot; Celsius&quot;;function toCelsius(fahrenheit) &#123; return (5&#x2F;9) * (fahrenheit-32);&#125; &lt;&#x2F;script&gt; &#x2F;&#x2F;The temperature is 25 Celsius Локальные переменныеПеременные, объявленные в функции JavaScript, становятся ЛОКАЛЬНЫМИ для этой функции.Доступ к локальным переменным возможен только из функции. 12345678&#x2F;&#x2F; code here can NOT use carNamefunction myFunction() &#123; var carName &#x3D; &quot;Volvo&quot;; &#x2F;&#x2F; code here CAN use carName&#125;&#x2F;&#x2F; code here can NOT use carName 1234567891011121314&lt;script&gt;myFunction();function myFunction() &#123; var carName &#x3D; &quot;Volvo&quot;; document.getElementById(&quot;demo1&quot;).innerHTML &#x3D; typeof carName + &quot; &quot; + carName;&#125;document.getElementById(&quot;demo2&quot;).innerHTML &#x3D;typeof carName; &#x2F;&#x2F;string Volvo &#x2F;&#x2F;undefined&lt;&#x2F;script&gt; Локальные переменные создаются при запуске функции и удаляются при ее завершении."}],"posts":[{"title":"menu","slug":"menu","date":"2020-03-05T15:30:03.000Z","updated":"2020-04-10T07:12:28.679Z","comments":true,"path":"menu/","link":"","permalink":"https://anastabest.github.io/mysite/menu/","excerpt":"","text":"MENU WEBSITEJAVA SCRIPT JS About JS Functions JS Display JS Statements JS Keywords JS Values JS Data Types JS Arrays JS Objects JS Events JS Strings JS String Methods JS Numbers JS Number Methods HEXO diploy.git RANDOM NOTES random notes ADMIN","categories":[],"tags":[]},{"title":"home","slug":"home","date":"2020-03-05T15:30:03.000Z","updated":"2020-04-08T12:49:05.583Z","comments":true,"path":"home/","link":"","permalink":"https://anastabest.github.io/mysite/home/","excerpt":"","text":"Этот блог создается для суммирования пройденного мной материала JAVA SCRIPT Скриптовый языкСкриптова мова (англ. scripting language) — мова програмування, розроблена для запису «сценаріїв», послідовностей операцій, які користувач може виконувати на комп’ютері. Динамі́чна мо́ва!Динамі́чна мо́ва дозволяє визначати типи даних і здійснювати синтаксичний аналіз і компіляцію «на льоту», безпосередньо на етапі виконання.","categories":[],"tags":[]},{"title":"learning","slug":"index","date":"2020-02-25T16:46:55.000Z","updated":"2020-03-19T23:06:03.147Z","comments":true,"path":"index/","link":"","permalink":"https://anastabest.github.io/mysite/index/","excerpt":"","text":"Hello my frends!","categories":[],"tags":[]}]}