{"meta":{"title":"BLOG LEARNING PROGRAMMING","subtitle":"","description":"My first site on Hexo","author":"Anastabest","url":"https://anastabest.github.io/mysite","root":"/mysite/"},"pages":[{"title":"Numbers","date":"2020-04-09T07:55:06.000Z","updated":"2020-04-10T07:08:30.886Z","comments":true,"path":"Numbers/index.html","permalink":"https://anastabest.github.io/mysite/Numbers/index.html","excerpt":"","text":"NaN - не числоNaN является зарезервированным словом JavaScript, указывающим, что число не является допустимым числом. Попытка сделать арифметику с нечисловой строкой приведет к NaN(не число): 123&lt;script&gt;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; 100 &#x2F; &quot;Apple&quot;; &#x2F;&#x2F;&#x2F;&#x2F; x will be NaN (Not a Number)&lt;&#x2F;script&gt; Однако, если строка содержит числовое значение, результатом будет число Вы можете использовать глобальную функцию JavaScript, isNaN()чтобы узнать, является ли значение числом:1234&lt;script&gt;var x &#x3D; 100 &#x2F; &quot;Apple&quot;;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; isNaN(x); &#x2F;&#x2F;true&lt;&#x2F;script&gt; Берегись NaN. Если вы используете NaNв математической операции, результат также будет NaN: Или результатом может быть конкатенация:12345&lt;script&gt;var x &#x3D; NaN;var y &#x3D; &quot;5&quot;;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; x + y; &#x2F;&#x2F;NaN5&lt;&#x2F;script&gt; NaN это число: typeof NaN возвращает number:1234&lt;script&gt;var x &#x3D; NaN;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; typeof x; &#x2F;&#x2F;number&lt;&#x2F;script&gt; Бесконечность InfinityInfinity(или -Infinity) - это значение, которое JavaScript вернет, если вы вычислите число за пределами максимально возможного числа. 123456789&lt;script&gt;var myNumber &#x3D; 2; var txt &#x3D; &quot;&quot;;while (myNumber !&#x3D; Infinity) &#123; myNumber &#x3D; myNumber * myNumber; txt &#x3D; txt + myNumber + &quot;&lt;br&gt;&quot;;&#125;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; txt;&lt;&#x2F;script&gt; // 12345678910416256655364294967296184467440737095520003.402823669209385e+381.157920892373162e+771.3407807929942597e+154Infinity Infinity это число: typeof Infinity возвращает number. Числа могут быть объектами"},{"title":"Data Types   Типы Данных","date":"2020-03-31T09:32:03.000Z","updated":"2020-04-08T07:24:28.777Z","comments":true,"path":"DataTypes/index.html","permalink":"https://anastabest.github.io/mysite/DataTypes/index.html","excerpt":"","text":"Переменные JavaScript : числа, строки, объекты и многое другое:var length = 16; // Number var lastName = &quot;Johnson&quot;; // String var x = {firstName:&quot;John&quot;, lastName:&quot;Doe&quot;}; // ObjectОбъекты могут быть очищены путем установки значения в NULL.&lt;script&gt; var person = {firstName:&quot;John&quot;, lastName:&quot;Doe&quot;, age:50, eyeColor:&quot;blue&quot;}; person = null; document.getElementById(&quot;demo&quot;).innerHTML = typeof person; &lt;/script&gt; // objectКонцепция:— При добавлении числа и строки JavaScript будет обрабатывать число как строку &lt;script&gt; var x = 16 + &quot;Volvo&quot;; document.getElementById(&quot;demo&quot;).innerHTML = x; &lt;/script&gt; // 16Volvo &lt;script&gt; var x = &quot;Volvo&quot; + 16; document.getElementById(&quot;demo&quot;).innerHTML = x; &lt;/script&gt; // Volvo16 ——JavaScript оценивает выражения слева направо. Разные последовательности могут давать разные результаты: &lt;script&gt; var x = 16 + 4 + &quot;Volvo&quot;; document.getElementById(&quot;demo&quot;).innerHTML = x; &lt;/script&gt; // 20Volvo &lt;script&gt; var x = &quot;Volvo&quot; + 16 + 4; document.getElementById(&quot;demo&quot;).innerHTML = x; &lt;/script&gt; // Volvo164Типы JavaScript являются динамическими одна и та же переменная может использоваться для хранения разных типов данных: &lt;script&gt; var x; // Now x is undefined x = 5; // Now x is a Number x = &quot;John&quot;; // Now x is a String document.getElementById(&quot;demo&quot;).innerHTML = x; &lt;/script&gt;Строки JavaScriptСтрока (или текстовая строка) - это серия символов &lt;script&gt; var carName1 = &quot;Volvo XC60&quot;; // Using double quotes var carName2 = &apos;Volvo XC60&apos;; // Using single quotes document.getElementById(&quot;demo&quot;).innerHTML = carName1 + &quot;&lt;br&gt;&quot; + carName2; &lt;/script&gt; // Volvo XC60 // Volvo XC60 JavaScript имеет только один тип чисел. Числа могут быть записаны с десятичными знаками или без них JavaScript BooleansЛогические значения могут иметь только два значения:true или false. 1234567&lt;script&gt;var x &#x3D; 5; var y &#x3D; 5; &#x2F;&#x2F; Returns true var z &#x3D; 6; &#x2F;&#x2F; Returns falsedocument.getElementById(&quot;demo&quot;).innerHTML &#x3D;(x &#x3D;&#x3D; y) + &quot;&lt;br&gt;&quot; + (x &#x3D;&#x3D; z);&lt;&#x2F;script&gt; Массивы JavaScriptМассивы JavaScript написаны в квадратных скобках.Элементы массива разделяются запятыми. &lt;script&gt; var cars = [&quot;Saab&quot;,&quot;Volvo&quot;,&quot;BMW&quot;]; document.getElementById(&quot;demo&quot;).innerHTML = cars[0]; &lt;/script&gt; // SaabИндексы массива начинаются с нуля, что означает, что первым элементом является [0]. JavaScript объектыОбъекты JavaScript пишутся с помощью фигурных скобок {}. Свойства объекта записываются в виде пар имя: значение, разделенных запятыми. &lt;script&gt; var person = { firstName : &quot;John&quot;, lastName : &quot;Doe&quot;, age : 50, eyeColor : &quot;blue&quot; }; document.getElementById(&quot;demo&quot;).innerHTML = person.firstName + &quot; is &quot; + person.age + &quot; years old.&quot;; // John is 50 years old. &lt;/script&gt;Тип оператораtypeof Оператор возвращает тип переменной или выражением:&lt;script&gt;s document.getElementById(&quot;demo&quot;).innerHTML = typeof &quot;&quot; + &quot;&lt;br&gt;&quot; + typeof &quot;John&quot; + &quot;&lt;br&gt;&quot; + string typeof &quot;John Doe&quot;; //Returnsstring &lt;/script&gt; //Returns string //Returns string&lt;script&gt; document.getElementById(&quot;demo&quot;).innerHTML = typeof 0 + &quot;&lt;br&gt;&quot; + //number typeof 314 + &quot;&lt;br&gt;&quot; + //number typeof 3.14 + &quot;&lt;br&gt;&quot; + //number typeof (3) + &quot;&lt;br&gt;&quot; + //number typeof (3 + 4); //number &lt;/script&gt;Значение UNDEFINED typeof undefinedВ JavaScript переменная без значения имеет: значение undefined. Тип тоже undefined.&lt;script&gt; var car; document.getElementById(&quot;demo&quot;).innerHTML = car + &quot;&lt;br&gt;&quot; + typeof car; // undefined &lt;/script&gt; // undefined Любую переменную можно очистить, установив значение в undefined. Тип тоже будет undefined. Значение NULL typeof objectВ JavaScript null это «ничего». Что-то, чего не существует.typeof null является объектом очистить объект, установив его в null&lt;script&gt; var person = {firstName:&quot;John&quot;, lastName:&quot;Doe&quot;, age:50, eyeColor:&quot;blue&quot;}; person = null; document.getElementById(&quot;demo&quot;).innerHTML = typeof person; &lt;/script&gt; // objectundefined и null равны по значению, но различаются по типу очистить объект, установив его в undefined&lt;script&gt; var person = {firstName:&quot;John&quot;, lastName:&quot;Doe&quot;, age:50, eyeColor:&quot;blue&quot;}; person = undefined; document.getElementById(&quot;demo&quot;).innerHTML = person; &lt;/script&gt; // undefinedtypeof undefined // undefined typeof null // object null === undefined // false null == undefined // trueПримитивное значение данных это одно простое значение данных без дополнительных свойств и методов. typeof oператор возвращает один из этих примитивных типов: string number boolean undefined&lt;script&gt; document.getElementById(&quot;demo&quot;).innerHTML = typeof &quot;john&quot; + &quot;&lt;br&gt;&quot; + // string typeof 3.14 + &quot;&lt;br&gt;&quot; + // number typeof true + &quot;&lt;br&gt;&quot; + // boolean typeof false + &quot;&lt;br&gt;&quot; + // boolean typeof x; // undefined &lt;/script&gt; Комплексные данные Complex Data (returns)typeof oператор может возвращать одно из двух сложных типов: function object typeof возвращает оператор «объект» для объектов, массивов, и нуля. typeof оператор не возвращает «объект» для функций. &lt;script&gt; document.getElementById(&quot;demo&quot;).innerHTML = typeof {name:&apos;john&apos;, age:34} + &quot;&lt;br&gt;&quot; + // object typeof [1,2,3,4] + &quot;&lt;br&gt;&quot; + // object typeof null + &quot;&lt;br&gt;&quot; + // object typeof function myFunc(){}; // function &lt;/script&gt;"},{"title":"About team","date":"2020-03-03T21:00:36.000Z","updated":"2020-03-03T21:28:25.781Z","comments":true,"path":"aboutTeam/index.html","permalink":"https://anastabest.github.io/mysite/aboutTeam/index.html","excerpt":"","text":"We are professional photographers"},{"title":"EVENTS","date":"2020-04-08T10:56:46.000Z","updated":"2020-04-08T12:02:09.654Z","comments":true,"path":"Events/index.html","permalink":"https://anastabest.github.io/mysite/Events/index.html","excerpt":"","text":"События JavaScript Когда JavaScript используется на страницах HTML, JavaScript может «реагировать» на эти события. HTML событияHTML-событие может быть тем, что делает браузер, или тем, что делает пользователь.Несколько примеров событий HTML: HTML-страница закончила загрузку Поле ввода HTML было изменено Была нажата кнопка HTMLВ приведенном выше примере код JavaScript изменяет содержимое элемента с помощью id = “demo”.1&lt;button onclick&#x3D;&quot;document.getElementById(&#39;demo&#39;).innerHTML&#x3D;Date()&quot;&gt;The time is?&lt;&#x2F;button&gt; В следующем примере код изменяет содержимое своего собственного элемента (используя this.innerHTML):1&lt;button onclick&#x3D;&quot;this.innerHTML&#x3D;Date()&quot;&gt;The time is?&lt;&#x2F;button&gt; Чаще встречаются атрибуты событий, вызывающие функции:1234567&lt;button onclick&#x3D;&quot;displayDate()&quot;&gt;The time is?&lt;&#x2F;button&gt;&lt;script&gt;function displayDate() &#123; document.getElementById(&quot;demo&quot;).innerHTML &#x3D; Date();&#125;&lt;&#x2F;script&gt; &#x2F;&#x2F;Wed Apr 08 2020 14:48:30 GMT+0300 (за східноєвропейським літнім часом) Common HTML Events / Общие события HTMLEvents &lt;onchange&gt; по изменению… HTML-элемент был изменен&lt;onclick&gt; по щелчку… Пользователь щелкает элемент HTML&lt;onmouseover&gt; при наведении курсора на… Пользователь наводит указатель мыши на элемент HTML&lt;onmouseout&gt; Пользователь наводит указатель мыши на элемент HTML&lt;onKeyDown&gt; Пользователь наводит указатель мыши на элемент HTML&lt;onload&gt; в процессе Браузер завершил загрузку страницы Что может сделать JavaScript?Обработчики событий могут использоваться для обработки и проверки пользовательского ввода, действий пользователя и действий браузера: Что нужно делать каждый раз, когда загружается страница Что нужно сделать, когда страница закрыта Действие, которое должно быть выполнено, когда пользователь нажимает кнопку Контент, который должен быть проверен, когда пользователь вводит данные И более … Можно использовать много разных методов, чтобы JavaScript мог работать с событиями: Атрибуты событий HTML могут выполнять код JavaScript напрямую Атрибуты событий HTML могут вызывать функции JavaScript Вы можете назначить свои собственные функции обработчика событий элементам HTML Вы можете предотвратить отправку или обработку событий И более …"},{"title":"JS ARRAY METHODS","date":"2020-04-12T08:26:58.000Z","updated":"2020-04-12T12:24:52.358Z","comments":true,"path":"arrayMethods/index.html","permalink":"https://anastabest.github.io/mysite/arrayMethods/index.html","excerpt":"","text":"Методы массива JavaScriptПреобразование массивов в строкиМетод toString() JavaScript преобразует массив в строку (разделенных запятыми) значений массива. 1234&lt;script&gt;var fruits &#x3D; [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];document.getElementById(&quot;demo&quot;).innerHTML &#x3D; fruits.toString(); &#x2F;&#x2F;Banana,Orange,Apple,Mango&lt;&#x2F;script&gt;"},{"title":"Break Continue","date":"2020-04-29T04:55:15.000Z","updated":"2020-04-29T05:32:00.411Z","comments":true,"path":"breakContinue/index.html","permalink":"https://anastabest.github.io/mysite/breakContinue/index.html","excerpt":"","text":"break Заявление «выпрыгивает» из цикла. continue Утверждение «перепрыгивает» на одну итерацию в цикле. #Оператор breakтакже может быть использован для выхода из цикла.breakОператор разрывает петлю и продолжает выполнение кода после цикла (если таковые имеются): 12345678910111213&lt;p&gt;A loop with a &lt;b&gt;break&lt;&#x2F;b&gt; statement.&lt;&#x2F;p&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;var text &#x3D; &quot;&quot;;var i;for (i &#x3D; 0; i &lt; 10; i++) &#123; if (i &#x3D;&#x3D;&#x3D; 3) &#123; break; &#125; text +&#x3D; &quot;The number is &quot; + i + &quot;&lt;br&gt;&quot;;&#125;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; text;&lt;&#x2F;script&gt; 123456&#x2F;&#x2F;JavaScript Loops&#x2F;&#x2F;A loop with a break statement.&#x2F;&#x2F;The number is 0&#x2F;&#x2F;The number is 1&#x2F;&#x2F;The number is 2 Продолжить заявлениеcontinueЗаявление ломается одна итерация (в цикле), если происходит определенное условие, и продолжается со следующей итерации цикла. 123456789101112131415&lt;p&gt;A loop with a &lt;b&gt;continue&lt;&#x2F;b&gt; statement.&lt;&#x2F;p&gt;&lt;p&gt;A loop which will skip the step where i &#x3D; 3.&lt;&#x2F;p&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;var text &#x3D; &quot;&quot;;var i;for (i &#x3D; 0; i &lt; 10; i++) &#123; if (i &#x3D;&#x3D;&#x3D; 3) &#123; continue; &#125; text +&#x3D; &quot;The number is &quot; + i + &quot;&lt;br&gt;&quot;;&#125;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; text;&lt;&#x2F;script&gt; 123456789101112Цикл с оператором continue.Цикл, который пропустит шаг, где i &#x3D; 3.The number is 0The number is 1The number is 2The number is 4The number is 5The number is 6The number is 7The number is 8The number is 9 JavaScript-меткиЧтобы пометить операторы JavaScript, перед оператором нужно указать имя метки и двоеточие:label:statements Чтобы пометить операторы JavaScript, перед оператором нужно указать имя метки и двоеточие: label:statements break labelname; continue labelname; continue Утверждение (с или без ссылки этикетки) могут быть использованы только пропустить одну итерацию цикла . Оператор breakбез ссылки на метку может быть использован только для выхода из цикла или переключателя . Со ссылкой этикетки, заявление перерыва может быть использовано , чтобы выскочить из любого блока кода : 123456789101112131415161718&lt;h2&gt;JavaScript break&lt;&#x2F;h2&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;var cars &#x3D; [&quot;BMW&quot;, &quot;Volvo&quot;, &quot;Saab&quot;, &quot;Ford&quot;];var text &#x3D; &quot;&quot;;list: &#123; text +&#x3D; cars[0] + &quot;&lt;br&gt;&quot;; text +&#x3D; cars[1] + &quot;&lt;br&gt;&quot;; break list; text +&#x3D; cars[2] + &quot;&lt;br&gt;&quot;; text +&#x3D; cars[3] + &quot;&lt;br&gt;&quot;; &#125;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; text;&lt;&#x2F;script&gt; 123JavaScript breakBMWVolvo *Блок кода - это блок кода между {и}.*"},{"title":"JS Display","date":"2020-03-22T15:02:43.000Z","updated":"2020-03-23T15:18:51.677Z","comments":true,"path":"display/index.html","permalink":"https://anastabest.github.io/mysite/display/index.html","excerpt":"","text":"Отображение JAVA SCRIPTinnerHTMLdocument.write()window.alert()console.log()"},{"title":"JavaScript","date":"2020-03-10T15:33:33.000Z","updated":"2020-03-10T16:00:12.859Z","comments":true,"path":"javascript/index.html","permalink":"https://anastabest.github.io/mysite/javascript/index.html","excerpt":"","text":"Java Script* &lt;script&gt; document.getElementById(\"demo\").innerHTML = \"My First JavaScript\"; &lt;/script&gt; * ## The &lt;script&gt; Tag"},{"title":"Bitwise","date":"2020-04-30T08:59:12.000Z","updated":"2020-04-30T11:34:04.828Z","comments":true,"path":"bitwise/index.html","permalink":"https://anastabest.github.io/mysite/bitwise/index.html","excerpt":"","text":"Побитовые операции JavaScript Битовые операторы JavaScriptOperator Name Description &amp; __ (AND) _ Sets each bit to 1 if both bits are 1Устанавливает каждый бит в 1, если оба бита равны 1 | __ (OR) ___ Sets each bit to 1 if one of two bits is 1Устанавливает каждый бит в 1, если один из двух битов равен 1 ^ _ (XOR) _ Sets each bit to 1 if only one of two bits is 1Устанавливает каждый бит в 1, если только один из двух битов равен 1 ~ _ (NOT) _ Inverts all the bitsИнвертирует все биты &lt;&lt; _(Zero fill left shift) _ Shifts left by pushing zeros in from the right and let the leftmost bits fall off Сдвиг влево, нажав нули справа, и пусть самые левые биты падают _(Signed right shift) Shifts right by pushing copies of the leftmost bit in from the left, and let the rightmost bits fall offСдвиг влево, толкая нули справа и оставляя самые левые биты JavaScript побитовое И (&amp;)Побитовое И возвращает 1, только если оба бита равны 1: 1234&lt;script&gt;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; 5 &amp; 1; &#x2F;&#x2F;1&lt;&#x2F;script&gt; JavaScript Побитовое ИЛИ (|)123&lt;script&gt;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; 5 | 1; &#x2F;&#x2F;5&lt;&#x2F;script&gt; JavaScript побитовый XOR (^)Побитовый XOR возвращает 1, если биты разные: 1234&lt;script&gt;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; 5 ^ 1; &#x2F;&#x2F;4&lt;&#x2F;script&gt; JavaScript побитовый НЕ (~)123script&gt;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; ~ 5; &#x2F;&#x2F;-6&lt;&#x2F;script&gt; JavaScript (нулевое заполнение) битовое смещение влево (&lt;&lt;)Это смещение нуля влево. Один или несколько нулевых битов вставляются справа, и самые левые биты падают: 123&lt;script&gt;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; 5 &lt;&lt; 1; &#x2F;&#x2F;10&lt;&#x2F;script&gt; JavaScript (сохранение знака) Битовый сдвиг вправо (&gt;&gt;)Это знак сохранения правого сдвига. Копии самого левого бита вставляются слева, а самые правые биты падают: 123&lt;script&gt;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; -5 &gt;&gt; 1; &#x2F;&#x2F;-3&lt;&#x2F;script&gt; JavaScript (нулевая заливка) вправо Shift (&gt;&gt;&gt;)Это смещение нуля вправо. Один или несколько нулевых битов вводятся слева, а самые правые биты падают: 123&lt;script&gt;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; 5 &gt;&gt;&gt; 1; &#x2F;&#x2F;2&lt;&#x2F;script&gt; Преобразование десятичного числа в двоичное1234567&lt;script&gt;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; dec2bin(-5); &#x2F;&#x2F;11111111111111111111111111111011function dec2bin(dec)&#123; return (dec &gt;&gt;&gt; 0).toString(2);&#125;&lt;&#x2F;script&gt; Преобразование двоичного в десятичное123456&lt;script&gt;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; bin2dec(101); &#x2F;&#x2F;5function bin2dec(bin)&#123; return parseInt(bin, 2).toString(10);&#125;&lt;&#x2F;script&gt;"},{"title":"NUMBER METHODS","date":"2020-04-10T07:08:26.000Z","updated":"2020-04-10T07:50:14.491Z","comments":true,"path":"numberMethods/index.html","permalink":"https://anastabest.github.io/mysite/numberMethods/index.html","excerpt":"","text":"Числовые методыЧисловые методы помогут работать с числами. Числовые методы и свойстваS"},{"title":"Java Script Keywords **ключевые слова**","date":"2020-03-23T11:56:14.000Z","updated":"2020-03-23T15:16:23.277Z","comments":true,"path":"keywords/index.html","permalink":"https://anastabest.github.io/mysite/keywords/index.html","excerpt":"","text":""},{"title":"Strings","date":"2020-04-08T12:47:33.000Z","updated":"2020-04-12T12:24:16.110Z","comments":true,"path":"Strings/index.html","permalink":"https://anastabest.github.io/mysite/Strings/index.html","excerpt":"","text":"Строки JavaScript Строки JavaScript используются для хранения и манипулирования текстом. Строка JavaScript содержит ноль или более символов, заключенных в кавычки. 12var carName1 &#x3D; &quot;Volvo XC60&quot;; &#x2F;&#x2F; Double quotesvar carName2 &#x3D; &#39;Volvo XC60&#39;; &#x2F;&#x2F; Single quotes Длина строки Чтобы найти длину строки, используйте встроенное lengthсвойство: 1234&lt;script&gt;var txt &#x3D; &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; txt.length;&lt;&#x2F;script&gt; Последовательность &quot; вставляет двойную кавычку в строку: 1234&lt;script&gt; &#x2F;&#x2F;Экранирующая последовательность \\ &quot;вставляет двойную кавычку в строку.var x &#x3D; &quot;We are the so-called \\&quot;Vikings\\&quot; from the north.&quot;; &#x2F;&#x2F;Мы так называемые &quot;викинги&quot; с севера.document.getElementById(&quot;demo&quot;).innerHTML &#x3D; x; &lt;&#x2F;script&gt; Последовательность &#39; вставляет одиночную кавычку в строку: 1234&lt;script&gt;var x &#x3D; &#39;It\\&#39;s alright.&#39;;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; x; &#x2F;&#x2F;It&#39;s alright.&lt;&#x2F;script&gt; Последовательность \\ вставляет в строку обратную косую черту: 1234&lt;script&gt;var x &#x3D; &quot;The character \\\\ is called backslash.&quot;;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; x; &#x2F;&#x2F;The character \\ is called backslash.&lt;&#x2F;script&gt; Шесть других escape-последовательностей допустимы в JavaScript \\b Backspaceвозврат на одну позицию \\f Form FeedПодача формы \\n New LineНовая линия \\r Carriage ReturnВозврат каретки \\t Horizontal TabulatorГоризонтальный табулятор \\v Vertical TabulatorВертикальный табулятор Прерывание длинных строк кода Если оператор JavaScript не помещается в одну строку, лучше всего его разбить после оператора:1234&lt;script&gt;document.getElementById(&quot;demo&quot;).innerHTML &#x3D;&quot;Hello Dolly!&quot;;&lt;&#x2F;script&gt; Вы также можете разбить строку кода внутри текстовой строки с помощью одной обратной косой черты:1234&lt;script&gt;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; &quot;Hello \\Dolly!&quot;;&lt;&#x2F;script&gt; Строки могут быть объектами Обычно строки JavaScript являются примитивными значениями, созданными из литералов: var firstName = “John”; Но строки также могут быть определены как объекты с ключевым словом new: var firstName = new String(“John”);1234567&lt;script&gt;var x &#x3D; &quot;John&quot;; &#x2F;&#x2F; x is a stringvar y &#x3D; new String(&quot;John&quot;); &#x2F;&#x2F; y is an objectdocument.getElementById(&quot;demo&quot;).innerHTML &#x3D;typeof x + &quot;&lt;br&gt;&quot; + typeof y; &lt;&#x2F;script&gt; При использовании ==оператора равные строки равны: 12345&lt;script&gt;var x &#x3D; &quot;John&quot;; &#x2F;&#x2F; x is a stringvar y &#x3D; new String(&quot;John&quot;); &#x2F;&#x2F; y is an objectdocument.getElementById(&quot;demo&quot;).innerHTML &#x3D; (x&#x3D;&#x3D;y);&lt;&#x2F;script&gt; При использовании ===оператора одинаковые строки не равны, поскольку ===оператор ожидает равенства как по типу, так и по значению. 12345&lt;script&gt;var x &#x3D; &quot;John&quot;; &#x2F;&#x2F; x is a stringvar y &#x3D; new String(&quot;John&quot;); &#x2F;&#x2F; y is an objectdocument.getElementById(&quot;demo&quot;).innerHTML &#x3D; (x&#x3D;&#x3D;&#x3D;y); &#x2F;&#x2F;false&lt;&#x2F;script&gt; Обратите внимание на разницу между (x==y)и (x===y).Сравнение двух объектов JavaScript всегда вернет false"},{"title":"Gift certificate","date":"2020-03-03T21:58:34.000Z","updated":"2020-03-03T22:20:44.052Z","comments":true,"path":"products/index.html","permalink":"https://anastabest.github.io/mysite/products/index.html","excerpt":"","text":"The photo session is held in the awesome professional VIP photo studio in Kiev, where you can design any environment;Makeup (1 image) and accompaniment of a makeup artist during the entire photo shoot will allow a woman to feel irresistible and unique every second of shooting, which will be confirmed by highly artistic pictures;After the photo shoot, the charming client receives a CD with photos in JPG format after professional post-processing, as well as all the drafts (yes, I transmit all the captured material);"},{"title":"FUNCTIONS JAVA SCRIPT","date":"2020-03-21T23:08:13.000Z","updated":"2020-04-04T18:55:10.252Z","comments":true,"path":"functions/index.html","permalink":"https://anastabest.github.io/mysite/functions/index.html","excerpt":"","text":"function - это блок кода, предназначенный для выролнения конкретной задачи. Выполняется function когда что-то ее вызывает. Ключевое слово function может использоваться для определения функции внутри выражения. Можно определять функции используя конструктор Functiоn и объявление функции.(function declaration) 123456789&lt;script&gt;function myFunction(p1, p2) &#123; return p1 * p2;&#125;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; myFunction(4, 3);&lt;&#x2F;script&gt; &#x2F;&#x2F; 12&#x2F;&#x2F; В этом примере вызывается функция, которая выполняет вычисление и возвращает результат: Синтаксис функции JavaScriptfunction ключевое слово, потом следует имя , потом следуют скобки () 123function name(parameter1, parameter2, parameter3) &#123; &#x2F;&#x2F; код для выполнения&#125; Параметры функции указаны в скобках () в определении функции. Аргументы функции - это значения, полученные функцией при ее вызове. Вызов функцииКод внутри функции будет выполняться , когда «что-то» вызывает (calls) функцию: (invokes calls) Когда происходит событие (когда пользователь нажимает кнопку) Когда он вызывается (calls) из кода JavaScript Автоматически (самостоятельно вызывается) Возврат функцииRETURN оператораКогда JavaScript достигает return оператора, функцияпрекращает выполнение. Если функция была вызвана из оператора, JavaScript «вернется» для выполнения кода после вызова оператора. Функции часто вычисляют возвращаемое значение . Возвращаемое значение «возвращается» обратно «вызывающему»: 12345678&lt;script&gt;var x &#x3D; myFunction(4, 3);document.getElementById(&quot;demo&quot;).innerHTML &#x3D; x;function myFunction(a, b) &#123; return a * b;&#125;&lt;&#x2F;script&gt; &#x2F;&#x2F;12 можно повторно использовать код: определите код один раз и используйте его много раз, с разными аргументами, чтобы получить разные результаты. 123456&lt;script&gt;function toCelsius(f) &#123; return (5&#x2F;9) * (f-32);&#125;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; toCelsius(77);&lt;&#x2F;script&gt; &#x2F;&#x2F;25 Оператор () вызывает функциюtoCelsiusссылается на объект функции и toCelsius()ссылается на результат функции. 123456&lt;script&gt;function toCelsius(f) &#123; return (5&#x2F;9) * (f-32);&#125;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; toCelsius;&lt;&#x2F;script&gt; &#x2F;&#x2F;function toCelsius(f) &#123; return (5&#x2F;9) * (f-32); &#125; Функции, используемые в качестве переменныхФункции можно использовать так же, как вы используете переменные, во всех типах формул, назначений и вычислений. 1234567Вместо использования переменной для хранения возвращаемого значения функции:var x &#x3D; toCelsius(77);var text &#x3D; &quot;The temperature is &quot; + x + &quot; Celsius&quot;;Вы можете использовать функцию напрямую, как значение переменной:var text &#x3D; &quot;The temperature is &quot; + toCelsius(77) + &quot; Celsius&quot;; 12345678&lt;script&gt;document.getElementById(&quot;demo&quot;).innerHTML &#x3D;&quot;The temperature is &quot; + toCelsius(77) + &quot; Celsius&quot;;function toCelsius(fahrenheit) &#123; return (5&#x2F;9) * (fahrenheit-32);&#125; &lt;&#x2F;script&gt; &#x2F;&#x2F;The temperature is 25 Celsius Локальные переменныеПеременные, объявленные в функции JavaScript, становятся ЛОКАЛЬНЫМИ для этой функции.Доступ к локальным переменным возможен только из функции. 12345678&#x2F;&#x2F; code here can NOT use carNamefunction myFunction() &#123; var carName &#x3D; &quot;Volvo&quot;; &#x2F;&#x2F; code here CAN use carName&#125;&#x2F;&#x2F; code here can NOT use carName 1234567891011121314&lt;script&gt;myFunction();function myFunction() &#123; var carName &#x3D; &quot;Volvo&quot;; document.getElementById(&quot;demo1&quot;).innerHTML &#x3D; typeof carName + &quot; &quot; + carName;&#125;document.getElementById(&quot;demo2&quot;).innerHTML &#x3D;typeof carName; &#x2F;&#x2F;string Volvo &#x2F;&#x2F;undefined&lt;&#x2F;script&gt; Локальные переменные создаются при запуске функции и удаляются при ее завершении."},{"title":"randomNotes","date":"2020-03-21T10:23:14.000Z","updated":"2020-03-24T20:53:43.193Z","comments":true,"path":"randonNotes/index.html","permalink":"https://anastabest.github.io/mysite/randonNotes/index.html","excerpt":"","text":"DEPLOY"},{"title":"Js Statements","date":"2020-03-23T04:12:43.000Z","updated":"2020-03-23T11:47:15.100Z","comments":true,"path":"statements/index.html","permalink":"https://anastabest.github.io/mysite/statements/index.html","excerpt":"","text":"Statements (операторы)&lt;script&gt; var x, y, z; // Statement 1 x = 5; // Statement 2 y = 6; // Statement 3 z = x + y; // Statement 4 document.getElementById(&quot;demo&quot;).innerHTML = &quot;The value of z is &quot; + z + &quot;.&quot;; &lt;/script&gt;Программа на JavaScript - список операторов- инструкций. ЗаявленияОператоры JavaScript состоят из: Значения операторы выражения ключевые слова комментарии Это утверждение говорит браузеру написать «Hello Dolly». внутри элемента HTML с id = “demo” &lt;p id=&quot;demo&quot;&gt;&lt;/p&gt; &lt;script&gt; document.getElementById(&quot;demo&quot;).innerHTML= &quot;Hello Dolly.&quot;; // JS получает доступ к элементу HTML, через метод **inerr.HTML**** &lt;/script&gt;Блоки кода в function(){…}Операторы кода группируются в блоки кода {…} внутри фигурных скобок.Блоки кода групируют операторы , которые выполняются вместе.*сгруппированные по блокам, в функциях JavaScript: function myFunction() { document.getElementById(“demo1”).innerHTML = “Hello Dolly!”; //используем два пробела для кода; document.getElementById(“demo2”).innerHTML = “How are you?”; }"},{"title":"Switch Переключатель","date":"2020-04-29T04:44:15.000Z","updated":"2020-04-29T04:45:28.762Z","comments":true,"path":"switchПереключатель/index.html","permalink":"https://anastabest.github.io/mysite/switch%D0%9F%D0%B5%D1%80%D0%B5%D0%BA%D0%BB%D1%8E%D1%87%D0%B0%D1%82%D0%B5%D0%BB%D1%8C/index.html","excerpt":"","text":""},{"title":"JS Arrays","date":"2020-04-01T10:35:26.000Z","updated":"2020-04-12T08:47:47.173Z","comments":true,"path":"arrays/index.html","permalink":"https://anastabest.github.io/mysite/arrays/index.html","excerpt":"","text":"Массивы JavaScriptСоздание массиваСинтаксис: 1var array_name &#x3D; [item1, item2, ...]; Массивы JavaScript используются для хранения нескольких значений в одной переменной.1. 1234&lt;script&gt;var cars &#x3D; [&quot;Saab&quot;, &quot;Volvo&quot;, &quot;BMW&quot;];document.getElementById(&quot;demo&quot;).innerHTML &#x3D; cars; &#x2F;&#x2F;Saab,Volvo,BMW&lt;&#x2F;script&gt; 2. 12345var cars &#x3D; [ &quot;Saab&quot;, &quot;Volvo&quot;, &quot;BMW&quot;]; Использование ключевого слова JavaScript newсоздается массив и присваиваются ему значения: 1234&lt;script&gt;var cars &#x3D; new Array(&quot;Saab&quot;, &quot;Volvo&quot;, &quot;BMW&quot;);document.getElementById(&quot;demo&quot;).innerHTML &#x3D; cars;&lt;&#x2F;script&gt; Массив - это специальная переменная, которая может содержать более одного значения за раз.Если у вас есть список элементов (например, список имен автомобилей), хранение автомобилей в отдельных переменных может выглядеть следующим образом: var car1 = “Saab”; var car2 = “Volvo”; var car3 = “BMW”;Доступ к элементам массива Вы получаете доступ к элементу массива, ссылаясь на номер индекса . 1234&lt;script&gt;var cars &#x3D; [&quot;Saab&quot;, &quot;Volvo&quot;, &quot;BMW&quot;];document.getElementById(&quot;demo&quot;).innerHTML &#x3D; cars[0]; &#x2F;&#x2F;Saab&lt;&#x2F;script&gt; Изменение элемента массива12345&lt;script&gt;var cars &#x3D; [&quot;Saab&quot;, &quot;Volvo&quot;, &quot;BMW&quot;];cars[0] &#x3D; &quot;Opel&quot;;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; cars; &#x2F;&#x2F;Opel,VOlVO,BMW&lt;&#x2F;script&gt; Доступ к полному массивуС JavaScript, полный массив может быть доступен путем обращения к имени массива: 1234script&gt;var cars &#x3D; [&quot;Saab&quot;, &quot;Volvo&quot;, &quot;BMW&quot;];document.getElementById(&quot;demo&quot;).innerHTML &#x3D; cars; &#x2F;&#x2F;Saab,Volvo,BMw&lt;&#x2F;script&gt; Массивы являются объектамиМассивы - это особый тип объектов. typeofОператор в JavaScript возвращает «объект» для массивов. Объекты используют имена для доступа к своим «членам». В этом примере person.firstName возвращает John:12345&lt;script&gt;var person &#x3D; &#123;firstName:&quot;John&quot;, lastName:&quot;Doe&quot;, age:46&#125;;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; person[&quot;firstName&quot;]; &#x2F;&#x2F;John&lt;&#x2F;script&gt; Элементы массива могут быть объектами Переменные JavaScript могут быть объектами. Массивы - это особые виды объектов. Из-за этого вы можете иметь переменные разных типов в одном массиве. Вы можете иметь объекты в массиве. Вы можете иметь функции в массиве. Вы можете иметь массивы в массиве: 123myArray[0] &#x3D; Date.now;myArray[1] &#x3D; myFunction;myArray[2] &#x3D; myCars; Свойства и методы массивасила массивов JavaScript - это встроенные свойства и методы массива: 12var x &#x3D; cars.length; &#x2F;&#x2F; The length property returns the number of elementsvar y &#x3D; cars.sort(); &#x2F;&#x2F; The sort() method sorts arrays Свойство длиныlengthСвойство массива возвращает длину массива (количество элементов массива). 1234&lt;script&gt;var fruits &#x3D; [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];document.getElementById(&quot;demo&quot;).innerHTML &#x3D; fruits.length; &#x2F;&#x2F;4&lt;&#x2F;script&gt; Доступ к первому элементу массива 12345&lt;script&gt;var fruits &#x3D; [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];var first &#x3D; fruits[0];document.getElementById(&quot;demo&quot;).innerHTML &#x3D; first;&lt;&#x2F;script&gt; Доступ к последнему элементу массива 12345&lt;script&gt;var fruits &#x3D; [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];var last &#x3D; fruits[fruits.length-1];document.getElementById(&quot;demo&quot;).innerHTML &#x3D; last; &#x2F;&#x2F;Mango&lt;&#x2F;script&gt; Looping Array Elements(образование петель)Самый безопасный способ перебрать массив - использовать for цикл: 12345678910111213&lt;script&gt;var fruits, text, fLen, i;fruits &#x3D; [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];fLen &#x3D; fruits.length;text &#x3D; &quot;&lt;ul&gt;&quot;;for (i &#x3D; 0; i &lt; fLen; i++) &#123; text +&#x3D; &quot;&lt;li&gt;&quot; + fruits[i] + &quot;&lt;&#x2F;li&gt;&quot;;&#125;text +&#x3D; &quot;&lt;&#x2F;ul&gt;&quot;;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; text; &lt;&#x2F;script&gt; вывод: (не нумерованный список) 1234* Banana* Orange* Apple* Mango Вы также можете использовать Array.forEach()функцию: 12345678910111213&lt;script&gt;var fruits, text;fruits &#x3D; [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];text &#x3D; &quot;&lt;ul&gt;&quot;;fruits.forEach(myFunction);text +&#x3D; &quot;&lt;&#x2F;ul&gt;&quot;;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; text;function myFunction(value) &#123; text +&#x3D; &quot;&lt;li&gt;&quot; + value + &quot;&lt;&#x2F;li&gt;&quot;;&#125; &lt;&#x2F;script&gt; 1234* Banana* Orange* Apple* Mango Добавление элементов массиваСамый простой способ добавить новый элемент в массив - использовать push() метод: 123456789&lt;script&gt;var fruits &#x3D; [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];document.getElementById(&quot;demo&quot;).innerHTML &#x3D; fruits;function myFunction() &#123; fruits.push(&quot;Lemon&quot;); document.getElementById(&quot;demo&quot;).innerHTML &#x3D; fruits; &#x2F;&#x2F;Banana,Orange,Apple,Mango,Lemon&#125;&lt;&#x2F;script&gt; Новый элемент также можно добавить в массив, используя lengthсвойство: 123456789&lt;script&gt;var fruits &#x3D; [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];document.getElementById(&quot;demo&quot;).innerHTML &#x3D; fruits;function myFunction() &#123; fruits[fruits.length] &#x3D; &quot;Lemon&quot;; document.getElementById(&quot;demo&quot;).innerHTML &#x3D; fruits; &#x2F;&#x2F;Banana,Orange,Apple,Mango,Lemon&#125;&lt;&#x2F;script&gt; Ассоциативные массивыМассивы с именованными индексами называются ассоциативными массивами (или хэшами). JavaScript не поддерживает массивы с именованными индексами. В JavaScript массивы всегда используют пронумерованные индексы 12345678&lt;script&gt;var person &#x3D; [];person[0] &#x3D; &quot;John&quot;;person[1] &#x3D; &quot;Doe&quot;;person[2] &#x3D; 46; document.getElementById(&quot;demo&quot;).innerHTML &#x3D;person[0] + &quot; &quot; + person.length; &#x2F;&#x2F;John 3&lt;&#x2F;script&gt; // person.length will return 3// person[0] will return “John” Разница между массивами и объектамиВ JavaScript массивы используют пронумерованные индексы . В JavaScript объекты используют именованные индексы . 1Массивы - это особый вид объектов с пронумерованными индексами. Когда использовать массивы. Когда использовать объекты. JavaScript не поддерживает ассоциативные массивы. Вы должны использовать объекты, когда вы хотите, чтобы имена элементов были строками (текст) . Вы должны использовать массивы, когда хотите, чтобы имена элементов были числами .Избегайте нового массива () Нет необходимости использовать встроенный в JavaScript конструктор newмассива Array (). Используйте [ ] вместо этого. Эти два разных оператора создают новый пустой массив с именем points: var points = new Array( ); // Badvar points = [ ]; // Good Эти два разных оператора создают новый массив, содержащий 6 чисел: 12345&lt;script&gt;&#x2F;&#x2F;var points &#x3D; new Array(40, 100, 1, 5, 25, 10); &#x2F;&#x2F;badvar points &#x3D; [40, 100, 1, 5, 25, 10]; &#x2F;&#x2F;gooddocument.getElementById(&quot;demo&quot;).innerHTML &#x3D; points[0]; &#x2F;&#x2F;40&lt;&#x2F;script&gt; Как распознать массивПроблема в том, что оператор JavaScript typeofвозвращает “ object”: 1234&lt;script&gt;var fruits &#x3D; [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];document.getElementById(&quot;demo&quot;).innerHTML &#x3D; typeof fruits; &#x2F;&#x2F;object&lt;&#x2F;script&gt; потому что массив JavaScript является объектом. Для решения этой проблемы ECMAScript 5 определяет новый метод Array.isArray():1234&lt;script&gt;var fruits &#x3D; [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];document.getElementById(&quot;demo&quot;).innerHTML &#x3D; Array.isArray(fruits); &#x2F;&#x2F;true&lt;&#x2F;script&gt; Для решения этой проблемы вы можете создать свою собственную isArray()функцию: 12345678&lt;script&gt;var fruits &#x3D; [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];document.getElementById(&quot;demo&quot;).innerHTML &#x3D; isArray(fruits);function isArray(myArray) &#123; return myArray.constructor.toString().indexOf(&quot;Array&quot;) &gt; -1; &#x2F;&#x2F;true&#125;&lt;&#x2F;script&gt; Вышеприведенная функция всегда возвращает true, если аргумент является массивом. instanceofОператор возвращает истину , если объект создается с помощью данного конструктора:1234&lt;script&gt;var fruits &#x3D; [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];document.getElementById(&quot;demo&quot;).innerHTML &#x3D; fruits instanceof Array; &#x2F;&#x2F; true&lt;&#x2F;script&gt;"},{"title":"JS Values","date":"2020-03-23T15:18:20.000Z","updated":"2020-03-23T15:30:30.591Z","comments":true,"path":"values/index.html","permalink":"https://anastabest.github.io/mysite/values/index.html","excerpt":"","text":"типы значений: фиксированные значения - ЛИТЕРАЛЫЧисла пишутся с десятичными знаками или без них (10.50 , 1001)Строки - это текст, написанный в двойных или одинарных кавычках: (“John Doe”) значения переменных - ПЕРЕМЕННЫЕ"},{"title":"Type Conversion Преобразование","date":"2020-04-29T05:34:16.000Z","updated":"2020-04-30T08:54:08.374Z","comments":true,"path":"typeConversionПреобразование/index.html","permalink":"https://anastabest.github.io/mysite/typeConversion%D0%9F%D1%80%D0%B5%D0%BE%D0%B1%D1%80%D0%B0%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5/index.html","excerpt":"","text":"Number () конвертирует в Number, String () конвертирует в String, Boolean () конвертирует в Boolean. Типы данных JavaScriptВ JavaScript есть 5 различных типов данных, которые могут содержать значения:string number boolean object function Есть 6 типов объектов: Object DateArray String Number Boolean И 2 типа данных, которые не могут содержать значения: null undefined Тип оператораиспользовать typeofоператор, чтобы найти тип данных переменной JavaScript. 12345678910111213&lt;script&gt;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; typeof &quot;john&quot; + &quot;&lt;br&gt;&quot; + typeof 3.14 + &quot;&lt;br&gt;&quot; + typeof NaN + &quot;&lt;br&gt;&quot; + typeof false + &quot;&lt;br&gt;&quot; + typeof [1,2,3,4] + &quot;&lt;br&gt;&quot; + typeof &#123;name:&#39;john&#39;, age:34&#125; + &quot;&lt;br&gt;&quot; + typeof new Date() + &quot;&lt;br&gt;&quot; + typeof function () &#123;&#125; + &quot;&lt;br&gt;&quot; + typeof myCar + &quot;&lt;br&gt;&quot; + typeof null;&lt;&#x2F;script&gt; 12345678910111213The JavaScript typeof OperatorThe typeof operator returns the type of a variable, object, function or expression.stringnumbernumberbooleanobjectobjectobjectfunctionundefinedobject Пожалуйста, обратите внимание:Тип данных NaN это числоТип данных массива - объектТип данных даты - объектТип данных null является объектомТип данных неопределенной переменной не определенТип данных переменной, которой не присвоено значение, также не определен 1Вы не можете использовать, typeofчтобы определить, является ли объект JavaScript массивом (или датой). Тип данных typeoftypeof Оператор не является переменной. Это оператор. Операторы (+ - * /) не имеют данных любого типа. Но typeof оператор всегда возвращает строку (содержащую тип операнда). Свойство конструктораconstructor Свойство возвращает функцию конструктора для всех переменных JavaScript. 12345678910&lt;script&gt;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; &quot;john&quot;.constructor + &quot;&lt;br&gt;&quot; + (3.14).constructor + &quot;&lt;br&gt;&quot; + false.constructor + &quot;&lt;br&gt;&quot; + [1,2,3,4].constructor + &quot;&lt;br&gt;&quot; + &#123;name:&#39;john&#39;, age:34&#125;.constructor + &quot;&lt;br&gt;&quot; + new Date().constructor + &quot;&lt;br&gt;&quot; + function () &#123;&#125;.constructor;&lt;&#x2F;script&gt; 123456789The constructor property returns the constructor function for a variable or an object.function String() &#123; [native code] &#125;function Number() &#123; [native code] &#125;function Boolean() &#123; [native code] &#125;function Array() &#123; [native code] &#125;function Object() &#123; [native code] &#125;function Date() &#123; [native code] &#125;function Function() &#123; [native code] &#125; проверить свойство конструктора, чтобы узнать, является ли объект Array 123456789101112&lt;p&gt;This &quot;home made&quot; isArray() function returns true when used on an array:&lt;&#x2F;p&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;var fruits &#x3D; [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];document.getElementById(&quot;demo&quot;).innerHTML &#x3D; isArray(fruits);function isArray(myArray) &#123; return myArray.constructor.toString().indexOf(&quot;Array&quot;) &gt; -1; &#x2F;&#x2F;true&#125;&lt;&#x2F;script&gt; можете проверить, является ли объект функцией Array 123456789&lt;script&gt;var fruits &#x3D; [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];document.getElementById(&quot;demo&quot;).innerHTML &#x3D; isArray(fruits);function isArray(myArray) &#123; return myArray.constructor &#x3D;&#x3D;&#x3D; Array;&#125;&lt;&#x2F;script&gt; 1234JavaScript Array ObjectThis &quot;home made&quot; isArray() function returns true when used on an array:true проверить свойство конструктора, чтобы узнать, является ли объект Date 12345678&lt;script&gt;var myDate &#x3D; new Date();document.getElementById(&quot;demo&quot;).innerHTML &#x3D; isDate(myDate);function isDate(myDate) &#123; return myDate.constructor.toString().indexOf(&quot;Date&quot;) &gt; -1; &#x2F;&#x2F;true&#125; &lt;&#x2F;script&gt; можете проверить, является ли объект функцией Date 12345678&lt;script&gt;var myDate &#x3D; new Date();document.getElementById(&quot;demo&quot;).innerHTML &#x3D; isDate(myDate);function isDate(myDate) &#123; return myDate.constructor &#x3D;&#x3D;&#x3D; Date; &#x2F;&#x2F;true&#125;&lt;&#x2F;script&gt; Преобразование типов JavaScriptПеременные JavaScript могут быть преобразованы в новую переменную и другой тип данных: С помощью функции JavaScript Автоматически по самому JavaScript Преобразование чисел в строкиГлобальный метод String()может преобразовывать числа в строки. Он может быть использован для любого типа чисел, литералов, переменных или выражений: 1234567&lt;script&gt;var x &#x3D; 123;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; String(x) + &quot;&lt;br&gt;&quot; + &#x2F;&#x2F;123 String(123) + &quot;&lt;br&gt;&quot; + &#x2F;&#x2F;123 String(100 + 23); &#x2F;&#x2F;123&lt;&#x2F;script&gt; Метод Number toString()cделает то же самое. 1234567&lt;script&gt;var x &#x3D; 123;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; x.toString() + &quot;&lt;br&gt;&quot; + &#x2F;&#x2F;123 (123).toString() + &quot;&lt;br&gt;&quot; + &#x2F;&#x2F;123 (100 + 23).toString(); &#x2F;&#x2F;123&lt;&#x2F;script&gt; toExponential() Возвращает строку с округленным числом и написанную с использованием экспоненциальной записи. toFixed() Возвращает строку с округленным числом и записанным с указанным количеством десятичных знаков. toPrecision() Возвращает строку с записанным числом указанной длины Преобразование логических значений в строкиГлобальный метод String() может преобразовывать логические значения в строки. 12String(false) &#x2F;&#x2F; returns &quot;false&quot;String(true) &#x2F;&#x2F; returns &quot;true&quot; Булевый метод toString()cделает то же самое.false.toString() // returns “false”true.toString() // returns “true” Преобразование дат в строкиГлобальный метод String() может конвертировать даты в строки. 1String(Date()) &#x2F;&#x2F; returns &quot;Thu Jul 17 2014 15:38:19 GMT+0200 (W. Europe Daylight Time)&quot; Метод Date toString()делает то же самое. 1Date().toString() &#x2F;&#x2F; returns &quot;Thu Jul 17 2014 15:38:19 GMT+0200 (W. Europe Daylight Time)&quot; getDate() Get the day as a number (1-31)getDay() Get the weekday a number (0-6)getFullYear() Get the four digit year (yyyy)getHours() Get the hour (0-23)getMilliseconds() Get the milliseconds (0-999)getMinutes() Get the minutes (0-59)getMonth() Get the month (0-11)getSeconds() Get the seconds (0-59)getTime() Get the time (milliseconds since January 1, 1970) Преобразование строк в числаГлобальный методNumber() может преобразовывать строки в числа. Строки, содержащие числа (например, «3.14»), преобразуются в числа (например, 3.14). Пустые строки конвертируются в 0. Все остальное конвертируется в NaN(не число). Number(“3.14”) // returns 3.14Number(“ “) // returns 0Number(“”) // returns 0Number(“99 88”) // returns NaN parseFloat() Parses a string and returns a floating point number (Разбирает строку и возвращает число с плавающей запятой) parseInt() Parses a string and returns an integer (Разбирает строку и возвращает целое число) Унарный + Оператор (The Unary + Operator)Унарный оператор + может быть использован для преобразования переменного в число: onclick12345678910&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;function myFunction() &#123; var y &#x3D; &quot;5&quot;; &#x2F;&#x2F;string var x &#x3D; + y; &#x2F;&#x2F;number document.getElementById(&quot;demo&quot;).innerHTML &#x3D; typeof y + &quot;&lt;br&gt;&quot; + typeof x;&#125;&lt;&#x2F;script&gt; Если переменная не может быть преобразована, она все равно станет числом, но со значением NaN (не числом):var y = “John”; // y is a stringvar x = + y; // x is a number (NaN) Преобразование логических чисел в числаГлобальный методNumber() также может преобразовывать логические значения в числа. 123Number(false) &#x2F;&#x2F; returns 0Number(true) &#x2F;&#x2F; returns 1 Преобразование дат в числаГлобальный метод Number() может быть использован для преобразования дат в числа. 12d &#x3D; new Date();Number(d) &#x2F;&#x2F; returns 1404568027739 Метод даты getTime() делает то же самое. 12d &#x3D; new Date();d.getTime() &#x2F;&#x2F; returns 1404568027739 Автоматическое преобразование типовКогда JavaScript пытается работать с «неправильным» типом данных, он пытается преобразовать значение в «правильный» тип. 1234567891011&lt;script&gt;var x &#x3D; [];document.getElementById(&quot;demo&quot;).innerHTML &#x3D;(5 + null) + &quot;&lt;br&gt;&quot; +(&quot;5&quot; + null) + &quot;&lt;br&gt;&quot; +(&quot;5&quot; + 2) + &quot;&lt;br&gt;&quot; +(&quot;5&quot; - 2) + &quot;&lt;br&gt;&quot; +(&quot;5&quot; * &quot;2&quot;) + &quot;&lt;br&gt;&quot; +(&quot;5&quot; &#x2F; &quot;2&quot;) + &quot;&lt;br&gt;&quot;&lt;&#x2F;script&gt; Результат не всегда то, что вы ожидаете: 5 + null // returns 5 because null is converted to 0“5” + null // returns “5null” because null is converted to “null”“5” + 2 // returns “52” because 2 is converted to “2”“5” - 2 // returns 3 because “5” is converted to 5“5” * “2” // returns 10 because “5” and “2” are converted to 5 and 2 Автоматическое преобразование строкJavaScript автоматически вызывает toString() функцию переменной, когда вы пытаетесь «вывести» объект или переменную: document.getElementById(“demo”).innerHTML = myVar; // if myVar = {name:”Fjohn”} // toString converts to “[object Object]”// if myVar = [1,2,3,4] // toString converts to “1,2,3,4”// if myVar = new Date() // toString converts to “Fri Jul 18 2014 09:08:55 GMT+0200” Числа и логические значения также преобразуются, но это не очень заметно: // if myVar = 123 // toString converts to “123”// if myVar = true // toString converts to “true”// if myVar = false // toString converts to “false” Таблица преобразования типов JavaScript( https://www.w3schools.com/js/js_type_conversion.asp )"},{"title":"Булевые","date":"2020-04-16T10:27:17.000Z","updated":"2020-04-16T11:04:22.815Z","comments":true,"path":"булевые/index.html","permalink":"https://anastabest.github.io/mysite/%D0%B1%D1%83%D0%BB%D0%B5%D0%B2%D1%8B%D0%B5/index.html","excerpt":"","text":"JavaScript Booleans JavaScript Boolean представляет одно из двух значений:true или false . Булевы значенияОчень часто в программировании вам понадобится тип данных, который может иметь только одно из двух значений, например ДА НЕТ ВКЛ ВЫКЛ ИСТИНА / ЛОЖЬДля этого в JavaScript есть логический тип данных. Он может принимать только значения true или false . The Boolean() FunctionВы можете использовать Boolean() функцию, чтобы узнать, является ли выражение (или переменная) истинным: 1234567891011&lt;p&gt;Display the value of Boolean(10 &gt; 9):&lt;&#x2F;p&gt;&lt;button onclick&#x3D;&quot;myFunction()&quot;&gt;Try it&lt;&#x2F;button&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;function myFunction() &#123; document.getElementById(&quot;demo&quot;).innerHTML &#x3D; Boolean(10 &gt; 9);&#125;&lt;&#x2F;script&gt; 12345Display the value of Boolean(10 &gt; 9):Try ittrue 1234567891011&lt;p&gt;Display the value of 10 &gt; 9:&lt;&#x2F;p&gt;&lt;button onclick&#x3D;&quot;myFunction()&quot;&gt;Try it&lt;&#x2F;button&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;function myFunction() &#123; document.getElementById(&quot;demo&quot;).innerHTML &#x3D; 10 &gt; 9;&#125;&lt;&#x2F;script&gt; 12345Display the value of 10 &gt; 9:Try ittrue Сравнения и условия1&#x3D;&#x3D; equal to if (day &#x3D;&#x3D; &quot;Monday&quot;) 1&gt; greater than if (salary &gt; 9000) 1&lt; less than if (age &lt; 18) Everything With a “Value” is TrueВсе с «ценностью» - правда 1234567891011121314151617&lt;script&gt;var b1 &#x3D; Boolean(100);var b2 &#x3D; Boolean(3.14);var b3 &#x3D; Boolean(-15);var b4 &#x3D; Boolean(&quot;Hello&quot;);var b5 &#x3D; Boolean(&#39;false&#39;);var b6 &#x3D; Boolean(1 + 7 + 3.14);document.getElementById(&quot;demo&quot;).innerHTML &#x3D;&quot;100 is &quot; + b1 + &quot;&lt;br&gt;&quot; +&quot;3.14 is &quot; + b2 + &quot;&lt;br&gt;&quot; +&quot;-15 is &quot; + b3 + &quot;&lt;br&gt;&quot; +&quot;Any (not empty) string is &quot; + b4 + &quot;&lt;br&gt;&quot; +&quot;Even the string &#39;false&#39; is &quot; + b5 + &quot;&lt;br&gt;&quot; +&quot;Any expression (except zero) is &quot; + b6;&lt;&#x2F;script&gt; 123456100 is true3.14 is true-15 is trueAny (not empty) string is trueEven the string &#39;false&#39; is trueAny expression (except zero) is true Everything Without a “Value” is FalseВсе без «ценности» ложноЛогическое значение 0 (ноль) равно false : 123456789101112&lt;p&gt;Display the Boolean value of -0:&lt;&#x2F;p&gt;&lt;button onclick&#x3D;&quot;myFunction()&quot;&gt;Try it&lt;&#x2F;button&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;function myFunction() &#123; var x &#x3D; -0; document.getElementById(&quot;demo&quot;).innerHTML &#x3D; Boolean(x);&#125;&lt;&#x2F;script&gt; 12345Display the Boolean value of -0:Try itfalse Логическое значение -0 (минус ноль) является ложным : 123456789101112&lt;p&gt;Display the Boolean value of -0:&lt;&#x2F;p&gt;&lt;button onclick&#x3D;&quot;myFunction()&quot;&gt;Try it&lt;&#x2F;button&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;function myFunction() &#123; var x &#x3D; -0; document.getElementById(&quot;demo&quot;).innerHTML &#x3D; Boolean(x);&#125;&lt;&#x2F;script&gt; 12345Display the Boolean value of -0:Try itfalse Логическое значение “” (пустая строка) равно false : 123456789101112&lt;p&gt;Display the Boolean value of &quot;&quot;:&lt;&#x2F;p&gt;&lt;button onclick&#x3D;&quot;myFunction()&quot;&gt;Try it&lt;&#x2F;button&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;function myFunction() &#123; var x &#x3D; &quot;&quot;; document.getElementById(&quot;demo&quot;).innerHTML &#x3D; Boolean(x);&#125;&lt;&#x2F;script&gt; 12345Display the Boolean value of &quot;&quot;:Try itfalse Логическое значение undefined равно false : 123456789101112&lt;p&gt;Display the Boolean value of undefined:&lt;&#x2F;p&gt;&lt;button onclick&#x3D;&quot;myFunction()&quot;&gt;Try it&lt;&#x2F;button&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;function myFunction() &#123; var x; document.getElementById(&quot;demo&quot;).innerHTML &#x3D; Boolean(x);&#125;&lt;&#x2F;script&gt; 12345Display the Boolean value of undefined:Try itfalse Логическое значение null равно false : 123456789101112&lt;p&gt;Display the Boolean value of null:&lt;&#x2F;p&gt;&lt;button onclick&#x3D;&quot;myFunction()&quot;&gt;Try it&lt;&#x2F;button&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;function myFunction() &#123; var x &#x3D; null; document.getElementById(&quot;demo&quot;).innerHTML &#x3D; Boolean(x);&#125;&lt;&#x2F;script&gt; 1&#x2F;&#x2F;false Логическое значение false равно (как вы уже догадались) false : 123456&lt;script&gt;function myFunction() &#123; var x &#x3D; false; document.getElementById(&quot;demo&quot;).innerHTML &#x3D; Boolean(x);&#125;&lt;&#x2F;script&gt; 1false Логическое значение NaN является ложным : 123456&lt;script&gt;function myFunction() &#123; var x &#x3D; 10 &#x2F; &quot;H&quot;; document.getElementById(&quot;demo&quot;).innerHTML &#x3D; Boolean(x);&#125;&lt;&#x2F;script&gt; 1&#x2F;&#x2F;false Логические значения могут быть объектамиОбычно логические значения JavaScript являются примитивными значениями, созданными из литералов: var x = false; Но логические значения также могут быть определены как объекты с ключевым словом new: var y = new Boolean(false); 12345678910p&gt;Never create booleans as objects.&lt;&#x2F;p&gt;&lt;p&gt;Booleans and objects cannot be safely compared.&lt;&#x2F;p&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;var x &#x3D; false; &#x2F;&#x2F; x is a booleanvar y &#x3D; new Boolean(false); &#x2F;&#x2F; y is an objectdocument.getElementById(&quot;demo&quot;).innerHTML &#x3D; typeof x + &quot;&lt;br&gt;&quot; + typeof y;&lt;&#x2F;script&gt; При использовании == оператора, равные булевы равны: 12345&lt;script&gt;var x &#x3D; false; &#x2F;&#x2F; x is a booleanvar y &#x3D; new Boolean(false); &#x2F;&#x2F; y is an objectdocument.getElementById(&quot;demo&quot;).innerHTML &#x3D; (x&#x3D;&#x3D;y);&lt;&#x2F;script&gt; При использовании === оператора равные логические значения не равны, поскольку ===оператор ожидает равенства как по типу, так и по значению. 12345&lt;script&gt; var x &#x3D; false; &#x2F;&#x2F; x is a numbervar y &#x3D; new Boolean(false); &#x2F;&#x2F; y is an objectdocument.getElementById(&quot;demo&quot;).innerHTML &#x3D; (x&#x3D;&#x3D;&#x3D;y); &#x2F;&#x2F;false&lt;&#x2F;script&gt; Объекты нельзя сравнивать: 12345&lt;script&gt;var x &#x3D; new Boolean(false); &#x2F;&#x2F; x is an objectvar y &#x3D; new Boolean(false); &#x2F;&#x2F; y is an objectdocument.getElementById(&quot;demo&quot;).innerHTML &#x3D; (x&#x3D;&#x3D;y); &#x2F;&#x2F;false&lt;&#x2F;script&gt; Обратите внимание на разницу между (x == y) и (x === y).Сравнение двух объектов JavaScript всегда возвращает false."},{"title":"STRING METHODS","date":"2020-04-08T14:40:05.000Z","updated":"2020-04-09T07:53:33.512Z","comments":true,"path":"stringMethods/index.html","permalink":"https://anastabest.github.io/mysite/stringMethods/index.html","excerpt":"","text":"Строковые методы JavaScript Строковые методы помогают вам работать со строками Поиск строки в строкеДва метода,indexOf() и search(), равны? Они принимают одинаковые аргументы (параметры) и возвращают одно и то же значение? Два метода НЕ равны. Это различия: search()Метод не может принимать второй аргумент позиции начала. indexOf()Метод не может принимать мощные значения поиска (регулярные выражения). Извлечение string частей3 метода для извлечения части строки: slice(start, end) substring(start, end) substr(start, length) The slice() Method12345&lt;script&gt;var str &#x3D; &quot;Apple, Banana, Kiwi&quot;;var res &#x3D; str.slice(7,13);document.getElementById(&quot;demo&quot;).innerHTML &#x3D; res; &#x2F;&#x2F;Banana&lt;&#x2F;script&gt; slice() извлекает часть строки и возвращает извлеченную часть в новой строке. Метод принимает 2 параметра: начальную позицию и конечную позицию (конечная позиция не включена). 1Помните: JavaScript считает позиции с нуля. Первая позиция 0. Если вы опустите второй параметр, метод будет вырезать остальную часть строки: 12345&lt;script&gt;var str &#x3D; &quot;Apple, Banana, Kiwi&quot;;var res &#x3D; str.slice(7);document.getElementById(&quot;demo&quot;).innerHTML &#x3D; res; &#x2F;&#x2F;Banana, Kiwi&lt;&#x2F;script&gt; считая с конца: 12345&lt;script&gt;var str &#x3D; &quot;Apple, Banana, Kiwi&quot;;var res &#x3D; str.slice(-12) document.getElementById(&quot;demo&quot;).innerHTML &#x3D; res; &#x2F;&#x2F;&#x2F;&#x2F;Banana, Kiwi&lt;&#x2F;script&gt; Метод подстроки ()substring() похоже на slice(). Разница в том, что substring() нельзя принимать отрицательные показатели. Метод substr ()substr() похоже на slice().Разница в том, что второй параметр указывает длину извлеченной части. 12345&lt;script&gt;var str &#x3D; &quot;Apple, Banana, Kiwi&quot;;var res &#x3D; str.substr(7,6);document.getElementById(&quot;demo&quot;).innerHTML &#x3D; res; &#x2F;&#x2F;Banana&lt;&#x2F;script&gt; Метод substr () извлекает часть строки и возвращает извлеченные части в новой строке. Если вы пропустите второй параметр, substr()будет вырезана остальная часть строки. 12345&lt;script&gt;var str &#x3D; &quot;Apple, Banana, Kiwi&quot;;var res &#x3D; str.substr(7);document.getElementById(&quot;demo&quot;).innerHTML &#x3D; res; &#x2F;&#x2F;Banana,Kiwi&lt;&#x2F;script&gt; Если первый параметр отрицателен, позиция отсчитывается от конца строки. 12345&lt;script&gt;var str &#x3D; &quot;Apple, Banana, Kiwi&quot;;var res &#x3D; str.substr(-4);document.getElementById(&quot;demo&quot;).innerHTML &#x3D; res; &#x2F;&#x2F;Kiwi&lt;&#x2F;script&gt; Замена содержимого строкиreplace() Метод заменяет указанное значение с другим значением в строке &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;body&gt; &lt;h2&gt;JavaScript String Methods&lt;/h2&gt; &lt;p&gt;Replace &quot;Microsoft&quot; with &quot;W3Schools&quot; in the paragraph below:&lt;/p&gt; &lt;button onclick=&quot;myFunction()&quot;&gt;Try it&lt;/button&gt; &lt;p id=&quot;demo&quot;&gt;Please visit Microsoft!&lt;/p&gt; &lt;script&gt; function myFunction() { var str = document.getElementById(&quot;demo&quot;).innerHTML; var txt = str.replace(&quot;Microsoft&quot;,&quot;W3Schools&quot;); document.getElementById(&quot;demo&quot;).innerHTML = txt; } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; По умолчанию replace() метод заменяет только первое совпадение. Метод concat ()concat() объединяет две или более строки: var text1 = \"Hello\"; var text2 = \"World!\"; var text3 = text1.concat(\" \",text2); document.getElementById(\"demo\").innerHTML = text3; //Hello World! concat() Метод может быть использован вместо оператора плюс. Эти две строки делают то же самое: var text = “Hello” + “ “ + “World!”;var text = “Hello”.concat(“ “, “World!”); String.trim ()trim() метод удаляет пробельные символы с обеих сторон строки: Извлечение строковых символов charAt(position) charCodeAt(position) Property access [ ] Метод charAt ()charAt() Метод возвращает символ по указанному индексу (позиции) в строке: &lt;script&gt; var str = &quot;HELLO WORLD&quot;; document.getElementById(&quot;demo&quot;).innerHTML = str.charAt(0); //return H; &lt;/script&gt; Преобразование строки в массивsplit() метода может преобразовать строку в массив &lt;button onclick=&quot;myFunction()&quot;&gt;Try it&lt;/button&gt; &lt;p id=&quot;demo&quot;&gt;&lt;/p&gt; &lt;script&gt; function myFunction() { var str = &quot;a,b,c,d,e,f&quot;; var arr = str.split(&quot;,&quot;); document.getElementById(&quot;demo&quot;).innerHTML = arr[0]; //a } &lt;/script&gt;"},{"title":"Методы Получения Даты","date":"2020-04-15T10:49:01.000Z","updated":"2020-04-15T11:20:05.157Z","comments":true,"path":"методыПолученияДаты/index.html","permalink":"https://anastabest.github.io/mysite/%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%D0%9F%D0%BE%D0%BB%D1%83%D1%87%D0%B5%D0%BD%D0%B8%D1%8F%D0%94%D0%B0%D1%82%D1%8B/index.html","excerpt":"","text":"Эти методы могут использоваться для получения информации от объекта даты: 1getFullYear() Get the year as a four digit number (yyyy) 1getMonth() Get the month as a number (0-11) 1getDate() Get the day as a number (1-31) 1getHours() Get the hour (0-23) 1getMinutes() Get the minute (0-59) 1getSeconds() Get the second (0-59) 1getMilliseconds() Get the millisecond (0-999) 1getTime() Get the time (milliseconds since January 1, 1970) 1getDay() Get the weekday as a number (0-6) 1Date.now() Get the time. ECMAScript 5. Метод getTime () /The getTime() MethodgetTime()Метод возвращает количество миллисекунд , прошедших с 1 января 1970 года: 123456&lt;script&gt;var d &#x3D; new Date();document.getElementById(&quot;demo&quot;).innerHTML &#x3D; d.getTime();&lt;&#x2F;script&gt;&#x2F;&#x2F;Функция getTime () возвращает количество миллисекунд с January 1, 1970.: 1586948352476 Метод getFullYear ()getFullYear() Метод возвращает год даты как четырехзначный номер: Метод getMonth ()getMonth() Метод возвращает месяц даты в виде числа (0-11): Вы можете использовать массив имен и getMonth() вернуть месяц как имя: 12345&lt;script&gt;var d &#x3D; new Date();var months &#x3D; [&quot;January&quot;,&quot;February&quot;,&quot;March&quot;,&quot;April&quot;,&quot;May&quot;,&quot;June&quot;,&quot;July&quot;,&quot;August&quot;,&quot;September&quot;,&quot;October&quot;,&quot;November&quot;,&quot;December&quot;];document.getElementById(&quot;demo&quot;).innerHTML &#x3D; months[d.getMonth()];&lt;&#x2F;script&gt; Метод getDate ()getDate() Метод возвращает день даты в виде числа (1-31): Метод getHours ()getHours() Метод возвращает часы даты как число (0-23): Метод getMinutes ()getMinutes() Метод возвращает протокол даты как число (0-59): Mетод getSeconds () getSeconds()Метод возвращает секунды даты как число (0-59): Метод getMilliseconds ()getMilliseconds() Метод возвращает миллисекунды дату как число (0-999): Метод getDay () getDay()Метод возвращает день недели даты в виде числа (0-6): Вы можете использовать массив имен и getDay()вернуть день недели как имя: 12345&lt;script&gt;var d &#x3D; new Date();var days &#x3D; [&quot;Sunday&quot;,&quot;Monday&quot;,&quot;Tuesday&quot;,&quot;Wednesday&quot;,&quot;Thursday&quot;,&quot;Friday&quot;,&quot;Saturday&quot;];document.getElementById(&quot;demo&quot;).innerHTML &#x3D; days[d.getDay()];&lt;&#x2F;script&gt; Методы даты UTCМетоды даты UTC используются для работы с датами UTC (даты универсального часового пояса): 12getUTCDate() Same as getDate(), but returns the UTC date 12getUTCDay() Same as getDay(), but returns the UTC day 12getUTCFullYear() Same as getFullYear(), but returns the UTC year 12getUTCHours() Same as getHours(), but returns the UTC hour 12getUTCMilliseconds() Same as getMilliseconds(), but returns the UTC milliseconds 12getUTCMinutes() Same as getMinutes(), but returns the UTC minutes 12getUTCMonth() Same as getMonth(), but returns the UTC month 12getUTCSeconds() Same as getSeconds(), but returns the UTC seconds"},{"title":"Даты  /  JavaScript Date Objects","date":"2020-04-13T15:35:46.000Z","updated":"2020-04-14T11:40:42.729Z","comments":true,"path":"даты/index.html","permalink":"https://anastabest.github.io/mysite/%D0%B4%D0%B0%D1%82%D1%8B/index.html","excerpt":"","text":"JavaScript Date Object позволяет нам работать с датами: JavaScript new Date() 1234&lt;script&gt;var d &#x3D; new Date();document.getElementById(&quot;demo&quot;).innerHTML &#x3D; d;&lt;&#x2F;script&gt; &#x2F;&#x2F;Tue Apr 14 2020 12:51:57 GMT+0300 (за східноєвропейським літнім часом) Объекты Date создаются с помощью new Date() конструктора. 4 способа создания нового объекта даты: new Date() new Date(year, month, day, hours, minutes, seconds, milliseconds) new Date(milliseconds) new Date(date string) new Date() создает новый объект даты с текущей датой и временем : new Date(year, month, ...)создает новый объект даты с указанной датой и временем . 12345&lt;script&gt;var d &#x3D; new Date(2018, 11, 24, 10, 33, 30, 0);document.getElementById(&quot;demo&quot;).innerHTML &#x3D; d;&lt;&#x2F;script&gt; &#x2F;&#x2F;Mon Dec 24 2018 10:33:30 GMT+0200 (за східноєвропейським стандартним часом) new Date(dateString) создает новый объект датa из строки даты : 1234&lt;script&gt;var d &#x3D; new Date(&quot;October 13, 2014 11:13:00&quot;);document.getElementById(&quot;demo&quot;).innerHTML &#x3D; d;&lt;&#x2F;script&gt; &#x2F;&#x2F;Mon Oct 13 2014 11:13:00 GMT+0300 (за східноєвропейським літнім часом) new Date(milliseconds) создает новый объект даты как нулевое время плюс миллисекунды : 1234&lt;script&gt;var d &#x3D; new Date(0);document.getElementById(&quot;demo&quot;).innerHTML &#x3D; d;&lt;&#x2F;script&gt; Методы датыКогда объект Date создается, ряд методов позволяет вам работать с ним. Отображение датJavaScript (по умолчанию) будет выводить даты в формате полнотекстовой строки: Когда вы отображаете объект даты в HTML, он автоматически преобразуется в строку с помощью toString()метода. 12d &#x3D; new Date();document.getElementById(&quot;demo&quot;).innerHTML &#x3D; d; Такой же как: 12345d &#x3D; new Date();document.getElementById(&quot;demo&quot;).innerHTML &#x3D; d.toString(); &#x2F;&#x2F;Tue Apr 14 2020 14:35:07 GMT+0300 (за східноєвропейським літнім часом)&#96;&#96;&#96; # &#96;toUTCString()&#96;Метод преобразует дату в строку UTC (стандартный дисплей даты). var d = new Date();document.getElementById(“demo”).innerHTML = d.toUTCString(); //Tue, 14 Apr 2020 11:36:13 GMT 12# &#96;toDateString()&#96;Метод преобразует дату в более читаемый формат: var d = new Date();document.getElementById(“demo”).innerHTML = d.toDateString(); //Tue Apr 14 2020```"},{"title":"Математический Объект","date":"2020-04-16T09:24:51.000Z","updated":"2020-04-16T10:09:13.502Z","comments":true,"path":"математическийОбъект/index.html","permalink":"https://anastabest.github.io/mysite/%D0%BC%D0%B0%D1%82%D0%B5%D0%BC%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B9%D0%9E%D0%B1%D1%8A%D0%B5%D0%BA%D1%82/index.html","excerpt":"","text":"Java Script Math Object Объект JavaScriptMath позволяет выполнять математические задачи над числами.Math.round () Math.round(x) возвращает значение x, округленное до ближайшего целого числа: 1234567&lt;p&gt;Math.round(x) returns the value of x rounded to its nearest integer:&lt;&#x2F;p&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; Math.round(4.4); &#x2F;&#x2F;4&lt;&#x2F;script&gt; 12Math.round(4.7); &#x2F;&#x2F; returns 5Math.round(4.4); &#x2F;&#x2F; returns 4 Math.pow ()Math.pow(x, y) возвращает значение x в степень y: 1234&lt;script&gt;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; Math.pow(8,2); &#x2F;&#x2F;64&lt;&#x2F;script&gt; Math.sqrt ()Math.sqrt(x) возвращает квадратный корень из x: 123&lt;script&gt;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; Math.sqrt(64); &#x2F;&#x2F;8&lt;&#x2F;script&gt; Math.abs ()Math.abs(x) возвращает абсолютное (положительное) значение x: 123&lt;script&gt;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; Math.abs(-4.4); &#x2F;&#x2F;4.4&lt;&#x2F;script&gt; Math.ceil ()Math.ceil(x) возвращает значение x, округленное до ближайшего целого числа: 123&lt;script&gt;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; Math.ceil(4.4); &#x2F;&#x2F;5&lt;&#x2F;script&gt; Math.floor ()Math.floor(x)возвращает значение х округляется вниз до ближайшего целого числа: 1234&lt;script&gt;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; Math.floor(4.7); &#x2F;&#x2F;4&lt;&#x2F;script&gt; Math.sin ()Math.sin(x) возвращает синус (значение между -1 и 1) угла x (в радианах). Если вы хотите использовать градусы вместо радиан, вам нужно конвертировать градусы в радианы: Угол в радианах = Угол в градусах х PI / 180. 1234&lt;script&gt;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; &quot;The sine value of 90 degrees is &quot; + Math.sin(90 * Math.PI &#x2F; 180);&lt;&#x2F;script&gt; 12345&#x2F;&#x2F;Math.sin(x) returns the sin of x (given in radians):&#x2F;&#x2F;Angle in radians &#x3D; (angle in degrees) * PI &#x2F; 180.&#x2F;&#x2F;The sine value of 90 degrees is 1 Math.cos ()Math.cos(x) возвращает косинус (значение между -1 и 1) угла x (в радианах). Если вы хотите использовать градусы вместо радиан, вам нужно конвертировать градусы в радианы: Угол в радианах = Угол в градусах х PI / 180. 1234&lt;script&gt;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; &quot;The cosine value of 0 degrees is &quot; + Math.cos(0 * Math.PI &#x2F; 180);&lt;&#x2F;script&gt; 12345&#x2F;&#x2F;Math.cos(x) returns the cosine of x (given in radians): &#x2F;&#x2F;Angle in radians &#x3D; (angle in degrees) * PI &#x2F; 180.&#x2F;&#x2F;The cosine value of 0 degrees is 1 Math.min () и Math.max ()Math.min() и Math.max() может использоваться, чтобы найти самое низкое или самое высокое значение в списке аргументов: 12345678&lt;p&gt;Math.min() returns the lowest value in a list of arguments:&lt;&#x2F;p&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;document.getElementById(&quot;demo&quot;).innerHTML &#x3D;Math.min(0, 150, 30, 20, -8, -200); &#x2F;&#x2F;-200&lt;&#x2F;script&gt; 12345678&lt;p&gt;Math.max() returns the highest value in a list of arguments.&lt;&#x2F;p&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;document.getElementById(&quot;demo&quot;).innerHTML &#x3D;Math.max(0, 150, 30, 20, -8, -200); &#x2F;&#x2F;150&lt;&#x2F;script&gt; Math.random ()Math.random() возвращает случайное число от 0 (включительно) до 1 (исключая): 12345678910&lt;p&gt;Math.random() returns a random number between 0 and 1:&lt;&#x2F;p&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; Math.random(); &#x2F;&#x2F; returns a random number&lt;&#x2F;script&gt; Математические свойства (константы)JavaScript предоставляет 8 математических констант, к которым можно обращаться с помощью объекта Math: 1234567891011&lt;script&gt;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; &quot;&lt;p&gt;&lt;b&gt;Math.E:&lt;&#x2F;b&gt; &quot; + Math.E + &quot;&lt;&#x2F;p&gt;&quot; +&quot;&lt;p&gt;&lt;b&gt;Math.PI:&lt;&#x2F;b&gt; &quot; + Math.PI + &quot;&lt;&#x2F;p&gt;&quot; +&quot;&lt;p&gt;&lt;b&gt;Math.SQRT2:&lt;&#x2F;b&gt; &quot; + Math.SQRT2 + &quot;&lt;&#x2F;p&gt;&quot; +&quot;&lt;p&gt;&lt;b&gt;Math.SQRT1_2:&lt;&#x2F;b&gt; &quot; + Math.SQRT1_2 + &quot;&lt;&#x2F;p&gt;&quot; +&quot;&lt;p&gt;&lt;b&gt;Math.LN2:&lt;&#x2F;b&gt; &quot; + Math.LN2 + &quot;&lt;&#x2F;p&gt;&quot; +&quot;&lt;p&gt;&lt;b&gt;Math.LN10:&lt;&#x2F;b&gt; &quot; + Math.LN10 + &quot;&lt;&#x2F;p&gt;&quot; +&quot;&lt;p&gt;&lt;b&gt;Math.LOG2E:&lt;&#x2F;b&gt; &quot; + Math.LOG2E + &quot;&lt;&#x2F;p&gt;&quot; +&quot;&lt;p&gt;&lt;b&gt;Math.Log10E:&lt;&#x2F;b&gt; &quot; + Math.LOG10E + &quot;&lt;&#x2F;p&gt;&quot;;&lt;&#x2F;script&gt; 1234567891011121314151617JavaScript Math Constants &#x2F;&#x2F;Math.E: 2.718281828459045 &#x2F;&#x2F;Math.PI: 3.141592653589793 &#x2F;&#x2F;Math.SQRT2: 1.4142135623730951 &#x2F;&#x2F;Math.SQRT1_2: 0.7071067811865476 &#x2F;&#x2F;Math.LN2: 0.6931471805599453 &#x2F;&#x2F;Math.LN10: 2.302585092994046 &#x2F;&#x2F;Math.LOG2E: 1.4426950408889634 &#x2F;&#x2F;Math.Log10E: 0.4342944819032518 Математический конструктор В отличие от других глобальных объектов, объект Math не имеет конструктора. Методы и свойства являются статическими. Все методы и свойства (константы) могут использоваться без предварительного создания объекта Math. Методы математических объектов(https://www.w3schools.com/js/js_math.asp) полный математический справочник(https://www.w3schools.com/jsref/jsref_obj_math.asp)"},{"title":"Регулярные Выражения","date":"2020-04-30T11:35:27.000Z","updated":"2020-04-30T21:04:15.549Z","comments":true,"path":"регулярныеВыражения/index.html","permalink":"https://anastabest.github.io/mysite/%D1%80%D0%B5%D0%B3%D1%83%D0%BB%D1%8F%D1%80%D0%BD%D1%8B%D0%B5%D0%92%D1%8B%D1%80%D0%B0%D0%B6%D0%B5%D0%BD%D0%B8%D1%8F/index.html","excerpt":"","text":"Регулярные выражения JavaScript Регулярное выражение - это последовательность символов, образующая шаблон поиска. Шаблон поиска можно использовать для операций поиска текста и замены текста. Что такое регулярное выражение?Регулярное выражение - это последовательность символов, образующая шаблон поиска . Когда вы ищете данные в тексте, вы можете использовать этот шаблон поиска для описания того, что вы ищете. Регулярное выражение может быть одним символом или более сложным шаблоном. Регулярные выражения могут использоваться для выполнения всех типов операций текстового поиска и замены текста . Синтаксис1&#x2F;pattern&#x2F;modifiers; ПРИМЕР: 1var patt &#x3D; &#x2F;w3schools&#x2F;i; Пример объяснил / w3schools / i - это регулярное выражение. w3schools - это шаблон (для поиска). i является модификатором (модифицирует поиск, чтобы быть нечувствительным к регистру). Использование строковых методовВ JavaScript регулярные выражения часто используются с двумя строковыми методами : search()и replace(). search() Метод использует выражение для поиска соответствия, и возвращает позицию матча. replace() Метод возвращает модифицированную строку , в которой заменяется шаблон. Использование поиска по search () со строкой /Using String search() With a StringВ search() методе ищет строку для указанного значения и возвращает позицию матча: 12345&lt;script&gt;var str &#x3D; &quot;Visit W3Schools!&quot;; var n &#x3D; str.search(&quot;W3Schools&quot;);document.getElementById(&quot;demo&quot;).innerHTML &#x3D; n; &#x2F;&#x2F; 6&lt;&#x2F;script&gt; Использование поиска search () с регулярным выражением /Using String search() With a Regular Expressionспользуйте регулярное выражение, чтобы выполнить поиск “w3schools” без учета регистра в строке: 12var str &#x3D; &quot;Visit W3Schools&quot;;var n &#x3D; str.search(&#x2F;w3schools&#x2F;i); &#x2F;&#x2F; 6 Использование String replace () Строкойreplace()Метод заменяет указанное значение с другим значением в строке: 1234567&lt;script&gt;function myFunction() &#123; var str &#x3D; document.getElementById(&quot;demo&quot;).innerHTML; var txt &#x3D; str.replace(&quot;Microsoft&quot;,&quot;W3Schools&quot;); document.getElementById(&quot;demo&quot;).innerHTML &#x3D; txt;&#125;&lt;&#x2F;script&gt; результат: 12345Replace &quot;Microsoft&quot; with &quot;W3Schools&quot; in the paragraph below:Try itPlease visit W3Schools! Используйте String replace () с регулярным выражениемИспользуйте регулярное выражение без учета регистра, чтобы заменить Microsoft на W3Schools в строке: 1234567891011&lt;button onclick&#x3D;&quot;myFunction()&quot;&gt;Try it&lt;&#x2F;button&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;Please visit Microsoft and Microsoft!&lt;&#x2F;p&gt;&lt;script&gt;function myFunction() &#123; var str &#x3D; document.getElementById(&quot;demo&quot;).innerHTML; var txt &#x3D; str.replace(&#x2F;microsoft&#x2F;i,&quot;W3Schools&quot;); document.getElementById(&quot;demo&quot;).innerHTML &#x3D; txt;&#125;&lt;&#x2F;script&gt; //(https://www.w3schools.com/js/tryit.asp?filename=tryjs_regexp_string_replace) 123Аргументы регулярного выражения (вместо строковых аргументов) могут быть использованы в методах выше.Регулярные выражения могут сделать ваш поиск намного более мощным (например, без учета регистра). Модификаторы регулярных выраженийМодификаторы можно использовать для выполнения глобальных поисков без учета регистра: i Выполнить сопоставление без учета регистра (Perform case-insensitive matching) 123456789101112&lt;button onclick&#x3D;&quot;myFunction()&quot;&gt;Try it&lt;&#x2F;button&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;function myFunction() &#123; var str &#x3D; &quot;Visit W3Schools&quot;; var patt1 &#x3D; &#x2F;w3schools&#x2F;i; var result &#x3D; str.match(patt1); document.getElementById(&quot;demo&quot;).innerHTML &#x3D; result; &#x2F;&#x2F; W3Schools&#125;&lt;&#x2F;script&gt; g Выполнить глобальное совпадение (найти все совпадения, а не останавливаться после первого совпадения) (Perform a global match (find all matches rather than stopping after the first match) ) 1234567891011121314&lt;button onclick&#x3D;&quot;myFunction()&quot;&gt;Try it&lt;&#x2F;button&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;function myFunction() &#123; var str &#x3D; &quot;Is this all there is?&quot;; var patt1 &#x3D; &#x2F;is&#x2F;g; var result &#x3D; str.match(patt1); document.getElementById(&quot;demo&quot;).innerHTML &#x3D; result; &#x2F;&#x2F; is,is&#125;&lt;&#x2F;script&gt;&#96;&#96;&#96; **m** Выполнить многострочное сопоставление (Perform multiline matching) Try it function myFunction() { var str = \"\\nIs th\\nis it?\"; var patt1 = /^is/m; var result = str.match(patt1); document.getElementById(\"demo\").innerHTML = result; // is } 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647---Шаблоны регулярных выражений---_Скобки_ используются для поиска диапазона символов:[abc] Найдите любой символ в скобках (Find any of the characters between the brackets) [0-9] Найдите любую из цифр в скобках (Find any of the digits between the brackets) (x|y) Найдите любую из цифр в скобках (Find any of the alternatives separated with |)---_Метасимволы_ - это символы с особым значением:---**\\d** найти цифру (Find a digit) ---**\\s** найти пробел (Find a whitespace character)---**\\b** Найдите совпадение в начале слова, подобного этому: \\ bWORD, или в конце слова, подобного этому: WORD \\ b(Find a match at the beginning of a word like this: \\bWORD, or at the end of a word like this: WORD\\b)---**\\uxxxx** Найти символ Unicode, указанный шестнадцатеричным числом xxxx (Find the Unicode character specified by the hexadecimal number xxxx)---Квантификаторы определяют количества:---**n+** Соответствует любой строке, которая содержит хотя бы один n (Matches any string that contains at least one n)---**n*** Соответствует любой строке, которая содержит ноль или более вхождений n (Matches any string that contains zero or more occurrences of n)---**n?** Соответствует любой строке, которая содержит ноль или одно вхождение n (Matches any string that contains zero or one occurrences of n)---Использование объекта RegExp---В JavaScript объект RegExp является объектом регулярного выражения с предопределенными свойствами и методами.---Использование &#96;test ()&#96;---&#96; test()&#96; Способ представляет собой способ выражения RegExp.Он ищет строку для шаблона и возвращает true или false, в зависимости от результата.В следующем примере выполняется поиск строки для символа «e»: Search for an \"e\" in the next paragraph: The best things in life are free! text = document.getElementById(\"p01\").innerHTML; document.getElementById(\"demo\").innerHTML = /e/.test(text); // true 1234567891011---Использование &#96;exec ()&#96;---&#96;exec()&#96; Способ представляет собой способ выражения RegExp.Он ищет строку для указанного шаблона и возвращает найденный текст как объект.Если совпадений не найдено, возвращается пустой _(нулевой)_ объект.В следующем примере выполняется поиск строки для символа «e»: var obj = /e/.exec(\"The best things in life are free!\"); document.getElementById(\"demo\").innerHTML = \"Found \" + obj[0] + \" in position \" + obj.index + \" in the text: \" + obj.input; // Found e in position 2 in the text: The best things in life are free!"},{"title":"Методы Установки Даты в JavaScript","date":"2020-04-15T11:23:41.000Z","updated":"2020-04-16T09:25:14.265Z","comments":true,"path":"методыУстановкиДаты/index.html","permalink":"https://anastabest.github.io/mysite/%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%D0%A3%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%BA%D0%B8%D0%94%D0%B0%D1%82%D1%8B/index.html","excerpt":"","text":"Методы Set Date позволяют устанавливать значения даты (годы, месяцы, дни, часы, минуты, секунды, миллисекунды) для объекта Date.Методы установки даты Методы Set Date используются для установки части даты: 1setDate() Set the day as a number (1-31) 1setFullYear() Set the year (optionally month and day) 1setHours() Set the hour (0-23) 1setMilliseconds() Set the milliseconds (0-999) 1setMinutes() Set the minutes (0-59) 1setMonth() Set the month (0-11) 1setSeconds() Set the seconds (0-59) 1setTime() Set the time (milliseconds since January 1, 1970) Метод setFullYear ()setFullYear() Метод устанавливает год объекта даты. В этом примере до 2020 года: 12345&lt;script&gt;var d &#x3D; new Date();d.setFullYear(2021);document.getElementById(&quot;demo&quot;).innerHTML &#x3D; d; &#x2F;&#x2F;Fri Apr 16 2021 12:04:46 GMT+0300 (за східноєвропейським літнім часом)&lt;&#x2F;script&gt; setFullYear() Метод может при необходимости установить месяц и день: 12345script&gt;var d &#x3D; new Date();d.setFullYear(2020, 11, 3);document.getElementById(&quot;demo&quot;).innerHTML &#x3D; d; &#x2F;&#x2F;Thu Dec 03 2020 12:06:01 GMT+0200 (за східноєвропейським стандартним часом)&lt;&#x2F;script&gt; Метод setMonth ()setMonth() Метод устанавливает месяц даты объекта (0-11): 12345&lt;script&gt;var d &#x3D; new Date();d.setMonth(11);document.getElementById(&quot;demo&quot;).innerHTML &#x3D; d; &#x2F;&#x2F;Wed Dec 16 2020 12:07:22 GMT+0200 (за східноєвропейським стандартним часом)&lt;&#x2F;script&gt; Метод setDate ()setDate() Метод устанавливает день даты объекта (1-31): 12345&lt;script&gt;var d &#x3D; new Date();d.setDate(15);document.getElementById(&quot;demo&quot;).innerHTML &#x3D; d;&#x2F;&#x2F;Wed Apr 15 2020 12:14:42 GMT+0300 (за східноєвропейським літнім часом)&lt;&#x2F;script&gt; Этот setDate() метод также можно использовать для добавления дней к дате: 12345&lt;script&gt;var d &#x3D; new Date();d.setDate(d.getDate() + 50); document.getElementById(&quot;demo&quot;).innerHTML &#x3D; d; &#x2F;&#x2F;Fri Jun 05 2020 12:13:09 GMT+0300 (за східноєвропейським літнім часом)&lt;&#x2F;script&gt; Метод setHours ()setHours() Метод устанавливает часы даты объекта (0-23): 12345&lt;script&gt;var d &#x3D; new Date();d.setHours(22);document.getElementById(&quot;demo&quot;).innerHTML &#x3D; d; &#x2F;&#x2F;Thu Apr 16 2020 22:15:37 GMT+0300 (за східноєвропейським літнім часом)&lt;&#x2F;script&gt; Метод setMinutes ()setMinutes() Метод устанавливает протокол дату объекта (0-59): 12345&lt;script&gt;var d &#x3D; new Date();d.setMinutes(30);document.getElementById(&quot;demo&quot;).innerHTML &#x3D; d; &#x2F;&#x2F;Thu Apr 16 2020 12:30:50 GMT+0300 (за східноєвропейським літнім часом)&lt;&#x2F;script&gt; Метод setSeconds ()setSeconds() Метод задает секунды даты объекта (0-59): 12345&lt;script&gt;var d &#x3D; new Date();d.setSeconds(30);document.getElementById(&quot;demo&quot;).innerHTML &#x3D; d; &#x2F;&#x2F;Thu Apr 16 2020 12:17:30 GMT+0300 (за східноєвропейським літнім часом)&lt;&#x2F;script&gt; Сравнить датыДаты можно легко сравнить. В следующем примере сравнивается сегодняшняя дата с 14 января 2100 года: 12345678910111213&lt;script&gt;var today, someday, text;today &#x3D; new Date();someday &#x3D; new Date();someday.setFullYear(2100, 0, 14);if (someday &gt; today) &#123; text &#x3D; &quot;Today is before January 14, 2100.&quot;;&#125; else &#123; text &#x3D; &quot;Today is after January 14, 2100.&quot;;&#125;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; text; &#x2F;&#x2F;Today is before January 14, 2100.&lt;&#x2F;script&gt;"},{"title":"метод  getElementById().","date":"2020-02-28T09:47:26.000Z","updated":"2020-04-04T17:57:39.077Z","comments":true,"path":"about/index.html","permalink":"https://anastabest.github.io/mysite/about/index.html","excerpt":"","text":"Java Script ## Скриптовый языкСкриптова мова (англ. scripting language) — мова програмування, розроблена для запису «сценаріїв», послідовностей операцій, які користувач може виконувати на комп’ютері. Динамі́чна мо́ва!Динамі́чна мо́ва дозволяє визначати типи даних і здійснювати синтаксичний аналіз і компіляцію «на льоту», безпосередньо на етапі виконання. Метод JavaScript HTML является getElementById(). Метод используется для «поиска» HTML-элемента (с id = «demo») и изменения элемента content ( innerHTML) на «Hello JavaScript» пример&lt;p id=&quot;demo&quot;&gt;JavaScript can change HTML content.&lt;/p&gt; &lt;button type=&quot;button&quot; onclick=&apos;document.getElementById(&quot;demo&quot;).innerHTML = &quot;Hello JavaScript!&quot;&apos;&gt;Click Me!&lt;/button&gt; при нажатии кнопки меняется текст; Атрибуты Все элементы HTML могут иметь атрибуты Атрибуты предоставляют дополнительную информацию об элементе Атрибуты всегда указываются в начальном теге Атрибуты обычно входят в пары имя / значение, такие как: name = “value” Атрибут href &lt;a href=&quot;https://www.w3schools.com&quot;&gt;This is a link&lt;/a&gt;Атрибут src &lt;img src=&quot;img_girl.jpg&quot;&gt;Атрибут width и height &lt;img src=&quot;img_girl.jpg&quot; width=&quot;500&quot; height=&quot;600&quot;&gt;Атрибут alt &lt;img src=&quot;img_girl.jpg&quot; alt=&quot;Girl with a jacket&quot;&gt;Атрибут style &lt;p style=&quot;color:red&quot;&gt;This is a red paragraph.&lt;/p&gt; style Атрибут используется для указания стиля элемента, как цвет, шрифт, размер и т.дАтрибут заголовка title 123&lt;p title&#x3D;&quot;I&#39;m a tooltip&quot;&gt;Mouse over this paragraph, to display the title attribute as a tooltip.&lt;&#x2F;p&gt; Атрибут lang 12345678&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en-US&quot;&gt;&lt;body&gt;...&lt;&#x2F;body&gt;&lt;&#x2F;html&gt; Вложенные элементы HTMLЭлементы HTML могут быть вложенными (элементы могут содержать элементы). Все документы HTML состоят из вложенных элементов HTML. Этот пример содержит четыре элемента HTML: 123456789&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&lt;h1&gt;My First Heading&lt;&#x2F;h1&gt;&lt;p&gt;My first paragraph.&lt;&#x2F;p&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt; JavaScript может изменять значения атрибутов HTML&lt;button onclick=&quot;document.getElementById(&apos;myImage&apos;).src=&apos;pic_bulbon.gif&apos;&quot;&gt;Turn on the light&lt;/button&gt; &lt;img id=&quot;myImage&quot; src=&quot;pic_bulboff.gif&quot; style=&quot;width:100px&quot;&gt; &lt;button onclick=&quot;document.getElementById(&apos;myImage&apos;).src=&apos;pic_bulboff.gif&apos;&quot;&gt;Turn off the light&lt;/button&gt; В этом примере JavaScript изменяет значение src атрибута (source) тега: Изменение стиля элемента HTML - это вариант изменения атрибута HTML&lt;p id=&quot;demo&quot;&gt;JavaScript can change the style of an HTML element.&lt;/p&gt; &lt;button type=&quot;button&quot; onclick=&quot;document.getElementById(&apos;demo&apos;).style.fontSize=&apos;35px&apos;&quot;&gt;Click Me!&lt;/button&gt; Может скрывать элементы&lt;button type=&quot;button&quot; onclick=&quot;document.getElementById(&apos;demo&apos;).style.display=&apos;none&apos;&quot;&gt;Click Me!&lt;/button&gt;Может отображать элементы&lt;p&gt;JavaScript can show hidden HTML elements.&lt;/p&gt; &lt;p id=&quot;demo&quot; style=&quot;display:none&quot;&gt;Hello JavaScript!&lt;/p&gt; &lt;button type=&quot;button&quot; onclick=&quot;document.getElementById(&apos;demo&apos;).style.display=&apos;block&apos;&quot;&gt;Click Me!&lt;/button&gt;"},{"title":"Случайный","date":"2020-04-16T10:10:43.000Z","updated":"2020-04-16T10:24:23.474Z","comments":true,"path":"случайный/index.html","permalink":"https://anastabest.github.io/mysite/%D1%81%D0%BB%D1%83%D1%87%D0%B0%D0%B9%D0%BD%D1%8B%D0%B9/index.html","excerpt":"","text":"Java Script Random Math.random ()Math.random() возвращает случайное число от 0 (включительно) до 1 (исключая): 1234567&lt;p&gt;Math.random() returns a random number between 0 (included) and 1 (excluded):&lt;&#x2F;p&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;document.getElementById(&quot;demo&quot;).innerHTML &#x3D; Math.random(); &#x2F;&#x2F; returns a random number&lt;&#x2F;script&gt; Math.random() всегда возвращает число ниже 1. JavaScript случайные целые числаMath.random() используется с Math.floor() может быть использована для получения случайных чисел. 123456789&lt;p&gt;Math.floor(Math.random() * 10) returns a random integer between 0 and 9 (both included):&lt;&#x2F;p&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;document.getElementById(&quot;demo&quot;).innerHTML &#x3D;Math.floor(Math.random() * 10);&lt;&#x2F;script&gt; &#x2F;&#x2F; returns a random integer from 0 to 9 1Math.floor(Math.random() * 11); &#x2F;&#x2F; returns a random integer from 0 to 10 1Math.floor(Math.random() * 101); &#x2F;&#x2F; returns a random integer from 0 to 100 1Math.floor(Math.random() * 10) + 1; &#x2F;&#x2F; returns a random integer from 1 to 10 1Math.floor(Math.random() * 100) + 1; &#x2F;&#x2F; returns a random integer from 1 to 100 Правильная случайная функцияКак видно из приведенных выше примеров, было бы неплохо создать правильную случайную функцию, которая будет использоваться для всех случайных целочисленных целей. Эта функция JavaScript всегда возвращает случайное число между min (включенным) и max (исключенным): 123456789101112&lt;p&gt;Every time you click the button, getRndInteger(min, max) returns a random number between 0 and 9 (both included):&lt;&#x2F;p&gt;&lt;button onclick&#x3D;&quot;document.getElementById(&#39;demo&#39;).innerHTML &#x3D; getRndInteger(0,10)&quot;&gt;Click Me&lt;&#x2F;button&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;function getRndInteger(min, max) &#123; return Math.floor(Math.random() * (max - min)) + min;&#125;&lt;&#x2F;script&gt; 12345Every time you click the button, getRndInteger(min, max) returns a random number between 0 and 9 (both included):Click Mereturn random Эта функция JavaScript всегда возвращает случайное число между min и max (оба включены): 1234567891011&lt;p&gt;Every time you click the button, getRndInteger(min, max) returns a random number between 1 and 10 (both included):&lt;&#x2F;p&gt;&lt;button onclick&#x3D;&quot;document.getElementById(&#39;demo&#39;).innerHTML &#x3D; getRndInteger(1,10)&quot;&gt;Click Me&lt;&#x2F;button&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;function getRndInteger(min, max) &#123; return Math.floor(Math.random() * (max - min + 1) ) + min;&#125;&lt;&#x2F;script&gt; 123456JavaScript Math.random()Every time you click the button, getRndInteger(min, max) returns a random number between 1 and 10 (both included):Click Mereturn random"},{"title":"Сравнения","date":"2020-04-16T11:05:43.000Z","updated":"2020-04-16T20:12:10.628Z","comments":true,"path":"сравнения/index.html","permalink":"https://anastabest.github.io/mysite/%D1%81%D1%80%D0%B0%D0%B2%D0%BD%D0%B5%D0%BD%D0%B8%D1%8F/index.html","excerpt":"","text":"Сравнение JavaScript и логические операторы Сравнение и Логические операторы используются для проверки true или false . Операторы сравненияОператоры сравнения используются в логических выражениях для определения равенства или разницы между переменными или значениями. Учитывая это x = 5, таблица ниже объясняет операторы сравнения: == equal to равно === equal value and equal type === равное значение и равный тип != not equal !== not equal value or not equal type &gt; greater than &gt; больше чем &lt; less than &gt;= greater than or equal to &lt;= less than or equal to Как это можно использоватьОператоры сравнения могут использоваться в условных выражениях для сравнения значений и выполнения действий в зависимости от результата: 1if (age &lt; 18) text &#x3D; &quot;Too young&quot;; Логические ОператорыЛогические операторы используются для определения логики между переменными или значениями. Учитывая это x = 6 и y = 3, таблица ниже объясняет логические операторы: &amp;&amp; and (x &lt; 10 &amp;&amp; y &gt; 1) is true || or (x == 5 || y == 5) is false ! not !(x == y) is true Условный (троичный) оператор /(Conditional (Ternary) Operator)JavaScript также содержит условный оператор, который присваивает значение переменной на основе некоторого условия. variablename = (condition) ? value1:value2 12345678910111213141516&lt;p&gt;Input your age and click the button:&lt;&#x2F;p&gt;&lt;input id&#x3D;&quot;age&quot; value&#x3D;&quot;18&quot; &#x2F;&gt; больше чем&lt;button onclick&#x3D;&quot;myFunction()&quot;&gt;Try it&lt;&#x2F;button&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;function myFunction() &#123; var age, voteable; age &#x3D; document.getElementById(&quot;age&quot;).value; voteable &#x3D; (age &lt; 18) ? &quot;Too young&quot;:&quot;Old enough&quot;; document.getElementById(&quot;demo&quot;).innerHTML &#x3D; voteable + &quot; to vote.&quot;;&#125;&lt;&#x2F;script&gt; Сравнение разных типовСравнение данных разных типов может дать неожиданные результаты. При сравнении строки с числом JavaScript преобразует строку в число при сравнении. Пустая строка преобразуется в 0. Нечисловая строка преобразуется в NaNвсегда false. больше примеров : (https://www.w3schools.com/js/js_comparisons.asp) При сравнении двух строк «2» будет больше «12», потому что (в алфавитном порядке) 1 меньше 2. Чтобы обеспечить правильный результат, переменные должны быть преобразованы в правильный тип перед сравнением: 12345678910111213141516171819202122&lt;h2&gt;JavaScript Comparisons&lt;&#x2F;h2&gt;&lt;p&gt;Input your age and click the button:&lt;&#x2F;p&gt;&lt;input id&#x3D;&quot;age&quot; value&#x3D;&quot;18&quot; &#x2F;&gt;&lt;button onclick&#x3D;&quot;myFunction()&quot;&gt;Try it&lt;&#x2F;button&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;function myFunction() &#123; var age, voteable; age &#x3D; Number(document.getElementById(&quot;age&quot;).value); if (isNaN(age)) &#123; voteable &#x3D; &quot;Input is not a number&quot;; &#125; else &#123; voteable &#x3D; (age &lt; 18) ? &quot;Too young&quot; : &quot;Old enough&quot;; &#125; document.getElementById(&quot;demo&quot;).innerHTML &#x3D; voteable;&#125;&lt;&#x2F;script&gt;"},{"title":"Условия","date":"2020-04-16T20:15:53.000Z","updated":"2020-04-16T20:31:32.103Z","comments":true,"path":"условия/index.html","permalink":"https://anastabest.github.io/mysite/%D1%83%D1%81%D0%BB%D0%BE%D0%B2%D0%B8%D1%8F/index.html","excerpt":"","text":"JavaScript, если еще и еще, если / JavaScript if else and else if Условные операторы используются для выполнения различных действий в зависимости от условий. Условные заявленияОчень часто, когда вы пишете код, вы хотите выполнять разные действия для разных решений. Вы можете использовать условные операторы в своем коде, чтобы сделать это. В JavaScript у нас есть следующие условные выражения: Используется ifдля указания блока кода, который должен быть выполнен, если указанное условие истинно Используйте elseдля указания блока кода, который будет выполнен, если то же условие ложно Используйте, else ifчтобы указать новое условие для проверки, если первое условие ложно Используйте switchдля указания множества альтернативных блоков кода, которые должны быть выполнены Заявление ifИспользуйте ifоператор, чтобы указать блок кода JavaScript, который будет выполнен, если условие истинно. 123if (condition) &#123; &#x2F;&#x2F; block of code to be executed if the condition is true&#125; Остальное заявлениеИспользуйте else оператор, чтобы указать блок кода, который будет выполнен, если условие ложно. 12345if (condition) &#123; &#x2F;&#x2F; block of code to be executed if the condition is true&#125; else &#123; &#x2F;&#x2F; block of code to be executed if the condition is false&#125; Если время меньше 18, создайте приветствие «Добрый день», иначе «Добрый вечер»: 12345if (hour &lt; 18) &#123; greeting &#x3D; &quot;Good day&quot;;&#125; else &#123; greeting &#x3D; &quot;Good evening&quot;;&#125; 12Результат приветствия будет:Good evening Остальное, если заявлениеИспользуйте else if оператор, чтобы указать новое условие, если первое условие ложно. 1234567if (condition1) &#123; &#x2F;&#x2F; block of code to be executed if condition1 is true&#125; else if (condition2) &#123; &#x2F;&#x2F; block of code to be executed if the condition1 is false and condition2 is true&#125; else &#123; &#x2F;&#x2F; block of code to be executed if the condition1 is false and condition2 is false&#125; Если время меньше 10:00, создайте приветствие «Доброе утро», если нет, но время меньше 20:00, создайте приветствие «Добрый день», иначе «Добрый вечер»: 1234567if (time &lt; 10) &#123; greeting &#x3D; &quot;Good morning&quot;;&#125; else if (time &lt; 20) &#123; greeting &#x3D; &quot;Good day&quot;;&#125; else &#123; greeting &#x3D; &quot;Good evening&quot;;&#125; 123Результат приветствия будет:Good evening"},{"title":"Формат Даты  /","date":"2020-04-14T11:41:20.000Z","updated":"2020-04-15T10:43:35.554Z","comments":true,"path":"форматДаты/index.html","permalink":"https://anastabest.github.io/mysite/%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%82%D0%94%D0%B0%D1%82%D1%8B/index.html","excerpt":"","text":"JavaScript ввод даты есть 3 типа форматов ввода даты в JavaScript: 123456Дата ISO «2015-03-25» (Международный стандарт) ISO Date --- --- ---Короткая дата &quot;03&#x2F;25&#x2F;2015&quot; Short Date --- --- ---Длинная дата «25 марта 2015» или «25 марта 2015» Long Date--- --- --- Ввод даты - даты разбора /Date Input - Parsing Dates Date.parse() метод для ее преобразования в миллисекунды. 12345678&lt;p&gt;Date.parse() returns the number of milliseconds between the date and January 1, 1970:&lt;&#x2F;p&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;var msec &#x3D; Date.parse(&quot;March 21, 2012&quot;);document.getElementById(&quot;demo&quot;).innerHTML &#x3D; msec;&lt;&#x2F;script&gt; использовать количество миллисекунд, чтобы преобразовать его в объект даты : 1234567&lt;script&gt;var msec &#x3D; Date.parse(&quot;March 21, 2012&quot;);var d &#x3D; new Date(msec);document.getElementById(&quot;demo&quot;).innerHTML &#x3D; d;&lt;&#x2F;script&gt;&#x2F;&#x2F;Wed Mar 21 2012 00:00:00 GMT+0200 (за східноєвропейським стандартним часом)"},{"title":"циклFor","date":"2020-04-17T20:22:37.000Z","updated":"2020-04-17T20:22:37.825Z","comments":true,"path":"циклFor/index.html","permalink":"https://anastabest.github.io/mysite/%D1%86%D0%B8%D0%BA%D0%BBFor/index.html","excerpt":"","text":""},{"title":"OBJECTS","date":"2020-04-04T18:56:18.000Z","updated":"2020-04-06T14:02:33.751Z","comments":true,"path":"objects/index.html","permalink":"https://anastabest.github.io/mysite/objects/index.html","excerpt":"","text":"Объект - это набор связанных данных и / или функциональных возможностей Состоят из нескольких переменных и функций(свойства и методы), когда они находятся внутри объектов. Все автомобили имеют одинаковые свойства , но значения свойств отличаются от автомобиля к автомобилю object автомобиль свойства - вес и цвет методы - запуск и остановка В JavaScript большинство вещей являются объектами, от основных функций JavaScript, таких как строки и массивы,д о API-интерфейсов браузера, построенных на основе JavaScript. Вы даже можете создавать свои собственные объекты для инкапсуляции связанных функций и переменных в эффективные пакеты и действовать как удобные контейнеры данных."},{"title":"Сортировка Массивов - /JavaScript Sorting Arrays/","date":"2020-04-13T12:23:10.000Z","updated":"2020-04-13T14:03:34.474Z","comments":true,"path":"сортировкаМассивов/index.html","permalink":"https://anastabest.github.io/mysite/%D1%81%D0%BE%D1%80%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%BA%D0%B0%D0%9C%D0%B0%D1%81%D1%81%D0%B8%D0%B2%D0%BE%D0%B2/index.html","excerpt":"","text":"sort() Метод сортирует массив по алфавиту 123456789101112131415&lt;p&gt;The sort() method sorts an array alphabetically.&lt;&#x2F;p&gt;&lt;button onclick&#x3D;&quot;myFunction()&quot;&gt;Try it&lt;&#x2F;button&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;var fruits &#x3D; [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];document.getElementById(&quot;demo&quot;).innerHTML &#x3D; fruits;function myFunction() &#123; fruits.sort(); document.getElementById(&quot;demo&quot;).innerHTML &#x3D; fruits;&#125;&lt;&#x2F;script&gt; reverse() Метод изменяет элементы в массиве. 1234567891011121314151617&lt;button onclick&#x3D;&quot;myFunction()&quot;&gt;Try it&lt;&#x2F;button&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;&#x2F;&#x2F; Create and display an array:var fruits &#x3D; [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];document.getElementById(&quot;demo&quot;).innerHTML &#x3D; fruits;function myFunction() &#123; &#x2F;&#x2F; First sort the array fruits.sort(); &#x2F;&#x2F; Then reverse it: fruits.reverse(); document.getElementById(&quot;demo&quot;).innerHTML &#x3D; fruits;&#125;&lt;&#x2F;script&gt; Числовая сортировкаПо умолчанию sort() функция сортирует значения в виде строк .Однако, если числа отсортированы как строки, «25» больше, чем «100», потому что «2» больше, чем «1». Из-за этого sort() метод будет давать неверный результат при сортировке чисел. 123456789101112131415&lt;p&gt;Click the button to sort the array in ascending order.&lt;&#x2F;p&gt;&lt;button onclick&#x3D;&quot;myFunction()&quot;&gt;Try it&lt;&#x2F;button&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;var points &#x3D; [40, 100, 1, 5, 25, 10];document.getElementById(&quot;demo&quot;).innerHTML &#x3D; points; function myFunction() &#123; points.sort(function(a, b)&#123;return a - b&#125;); document.getElementById(&quot;demo&quot;).innerHTML &#x3D; points;&#125;&lt;&#x2F;script&gt; Функция сравненияЦель функции сравнения - определить альтернативный порядок сортировки. Функция сравнения должна возвращать отрицательное, нулевое или положительное значение в зависимости от аргументов: 1function(a, b)&#123;return a - b&#125; Когда sort() функция сравнивает два значения, она отправляет значения в функцию сравнения и сортирует значения в соответствии с возвращенным (отрицательным, нулевым, положительным) значением. Пример: Функция сравнения сравнивает все значения в массиве по два значения за раз (a, b). При сравнении 40 и 100 sort()метод вызывает функцию сравнения (40, 100). Функция вычисляет 40 - 100 (a - b), и поскольку результат отрицательный (-60), функция сортировки будет сортировать 40 как значение ниже 100. 123456789101112131415161718&lt;button onclick&#x3D;&quot;myFunction1()&quot;&gt;Sort Alphabetically&lt;&#x2F;button&gt;&lt;button onclick&#x3D;&quot;myFunction2()&quot;&gt;Sort Numerically&lt;&#x2F;button&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;var points &#x3D; [40, 100, 1, 5, 25, 10];document.getElementById(&quot;demo&quot;).innerHTML &#x3D; points; function myFunction1() &#123; points.sort(); document.getElementById(&quot;demo&quot;).innerHTML &#x3D; points;&#125;function myFunction2() &#123; points.sort(function(a, b)&#123;return a - b&#125;); document.getElementById(&quot;demo&quot;).innerHTML &#x3D; points;&#125;&lt;&#x2F;script&gt; Сортировка массива в случайном порядке123456789101112131415&lt;p&gt;Click the button (again and again) to sort the array in random order.&lt;&#x2F;p&gt;&lt;button onclick&#x3D;&quot;myFunction()&quot;&gt;Try it&lt;&#x2F;button&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;var points &#x3D; [40, 100, 1, 5, 25, 10];document.getElementById(&quot;demo&quot;).innerHTML &#x3D; points; function myFunction() &#123; points.sort(function(a, b)&#123;return 0.5 - Math.random()&#125;); document.getElementById(&quot;demo&quot;).innerHTML &#x3D; points;&#125;&lt;&#x2F;script&gt; The Fisher Yates Method123456789101112131415161718192021&lt;p&gt;Click the button (again and again) to sort the array in random order.&lt;&#x2F;p&gt;&lt;button onclick&#x3D;&quot;myFunction()&quot;&gt;Try it&lt;&#x2F;button&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;var points &#x3D; [40, 100, 1, 5, 25, 10];document.getElementById(&quot;demo&quot;).innerHTML &#x3D; points; function myFunction() &#123;var i, j, k; for (i &#x3D; points.length -1; i &gt; 0; i--) &#123; j &#x3D; Math.floor(Math.random() * i) k &#x3D; points[i] points[i] &#x3D; points[j] points[j] &#x3D; k &#125; document.getElementById(&quot;demo&quot;).innerHTML &#x3D; points;&#125;&lt;&#x2F;script&gt; Найти самое высокое (или самое низкое) значение массивапосле сортировки массива вы можете использовать индекс для получения самых высоких и самых низких значений. Сортировка по возрастанию: 1234567&lt;p&gt;The lowest number is &lt;span id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;span&gt;.&lt;&#x2F;p&gt;&lt;script&gt;var points &#x3D; [40, 100, 1, 5, 25, 10];points.sort(function(a, b)&#123;return a-b&#125;);document.getElementById(&quot;demo&quot;).innerHTML &#x3D; points[0]; &#x2F;&#x2F;The lowest number is 1. &lt;&#x2F;script&gt; //теперь points [0] содержит самое низкое значение// и points [points.length-1] содержит наибольшее значение Сортировка по убыванию: 1234567&lt;p&gt;The highest number is &lt;span id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;span&gt;.&lt;&#x2F;p&gt;&lt;script&gt;var points &#x3D; [40, 100, 1, 5, 25, 10];points.sort(function(a, b)&#123;return b-a&#125;);document.getElementById(&quot;demo&quot;).innerHTML &#x3D; points[0];&lt;&#x2F;script&gt; // теперь points [0] содержит наибольшее значение// и points [points.length-1] содержит самое низкое значение Использование Math.max ()для массиваВы можете использовать, Math.max.applyчтобы найти наибольшее число в массиве: 12345678&lt;script&gt;var points &#x3D; [40, 100, 1, 5, 25, 10];document.getElementById(&quot;demo&quot;).innerHTML &#x3D; myArrayMax(points);function myArrayMax(arr) &#123; return Math.max.apply(null, arr); &#x2F;&#x2F;The highest number is 100.&#125;&lt;&#x2F;script&gt; Math.max.apply(null, [1, 2, 3]) эквивалентно Math.max(1, 2, 3).Использование Math.min () для массива Вы можете использовать, Math.min.applyчтобы найти наименьшее число в массиве: 12345678910&lt;p&gt;The lowest number is &lt;span id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;span&gt;.&lt;&#x2F;p&gt;&lt;script&gt;var points &#x3D; [40, 100, 1, 5, 25, 10];document.getElementById(&quot;demo&quot;).innerHTML &#x3D; myArrayMin(points);function myArrayMin(arr) &#123; return Math.min.apply(null, arr); &#x2F;&#x2F;The lowest number is 1.&#125;&lt;&#x2F;script&gt; Math.min.apply(null, [1, 2, 3]) эквивалентно Math.min(1, 2, 3). Мои Мин / Макс Методы JavaScript //My Min / Max JavaScript MethodsСамое быстрое решение - это использовать «домашний» метод. Эта функция просматривает массив, сравнивая каждое значение с наибольшим найденным значением:Пример (Найти Макс) 1234567891011121314151617&lt;p&gt;The highest number is &lt;span id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;span&gt;.&lt;&#x2F;p&gt;&lt;script&gt;var points &#x3D; [40, 100, 1, 5, 25, 10];document.getElementById(&quot;demo&quot;).innerHTML &#x3D; myArrayMax(points);function myArrayMax(arr) &#123; var len &#x3D; arr.length; var max &#x3D; -Infinity; while (len--) &#123; if (arr[len] &gt; max) &#123; max &#x3D; arr[len]; &#x2F;&#x2F;The highest number is 100. &#125; &#125; return max;&#125;&lt;&#x2F;script&gt; Эта функция просматривает массив, сравнивая каждое значение с самым низким найденным значением: 1234567891011121314151617&lt;p&gt;The lowest number is &lt;span id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;span&gt;.&lt;&#x2F;p&gt;&lt;script&gt;var points &#x3D; [40, 100, 1, 5, 25, 10];document.getElementById(&quot;demo&quot;).innerHTML &#x3D; myArrayMin(points);function myArrayMin(arr) &#123; var len &#x3D; arr.length; var min &#x3D; Infinity; while (len--) &#123; if (arr[len] &lt; min) &#123; min &#x3D; arr[len]; &#125; &#125; return min; &#x2F;&#x2F;The lowest number is 1.&#125;&lt;&#x2F;script&gt; Сортировка массивов объектовМассивы JavaScript часто содержат объекты: 12345var cars &#x3D; [ &#123;type:&quot;Volvo&quot;, year:2016&#125;, &#123;type:&quot;Saab&quot;, year:2001&#125;, &#123;type:&quot;BMW&quot;, year:2010&#125;]; Даже если объекты имеют свойства разных типов данных, sort()метод можно использовать для сортировки массива. Решение состоит в том, чтобы написать функцию сравнения для сравнения значений свойств: 123456789101112131415161718192021222324252627&lt;button onclick&#x3D;&quot;myFunction()&quot;&gt;Sort&lt;&#x2F;button&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;var cars &#x3D; [ &#123;type:&quot;Volvo&quot;, year:2016&#125;, &#123;type:&quot;Saab&quot;, year:2001&#125;, &#123;type:&quot;BMW&quot;, year:2010&#125;];displayCars();function myFunction() &#123; cars.sort(function(a, b)&#123;return a.year - b.year&#125;); displayCars();&#125;function displayCars() &#123; document.getElementById(&quot;demo&quot;).innerHTML &#x3D; cars[0].type + &quot; &quot; + cars[0].year + &quot;&lt;br&gt;&quot; + &#x2F;&#x2F;Saab 2001 &#x2F;&#x2F; BMW 2010 &#x2F;&#x2F; Volvo 2016 cars[1].type + &quot; &quot; + cars[1].year + &quot;&lt;br&gt;&quot; + cars[2].type + &quot; &quot; + cars[2].year;&#125;&lt;&#x2F;script&gt; Сравнение свойств строки 12345678910111213141516171819202122232425262728293031323334&lt;button onclick&#x3D;&quot;myFunction()&quot;&gt;Sort&lt;&#x2F;button&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;var cars &#x3D; [ &#123;type:&quot;Volvo&quot;, year:2016&#125;, &#123;type:&quot;Saab&quot;, year:2001&#125;, &#123;type:&quot;BMW&quot;, year:2010&#125;];displayCars();function myFunction() &#123; cars.sort(function(a, b)&#123; var x &#x3D; a.type.toLowerCase(); var y &#x3D; b.type.toLowerCase(); if (x &lt; y) &#123;return -1;&#125; if (x &gt; y) &#123;return 1;&#125; return 0; &#125;); displayCars();&#125;function displayCars() &#123; document.getElementById(&quot;demo&quot;).innerHTML &#x3D; cars[0].type + &quot; &quot; + cars[0].year + &quot;&lt;br&gt;&quot; + cars[1].type + &quot; &quot; + cars[1].year + &quot;&lt;br&gt;&quot; + cars[2].type + &quot; &quot; + cars[2].year;&#125;&lt;&#x2F;script&gt; &#x2F;&#x2F;BMW 2010 &#x2F;&#x2F;Saab 2001 &#x2F;&#x2F;Volvo 2016"},{"title":"Итерация Массива   / Array Iteration","date":"2020-04-13T14:19:50.000Z","updated":"2020-04-13T15:35:00.546Z","comments":true,"path":"итерацияМассива/index.html","permalink":"https://anastabest.github.io/mysite/%D0%B8%D1%82%D0%B5%D1%80%D0%B0%D1%86%D0%B8%D1%8F%D0%9C%D0%B0%D1%81%D1%81%D0%B8%D0%B2%D0%B0/index.html","excerpt":"","text":"Методы итерации JavaScript Методы итерации массива работают с каждым элементом массива. forEach() Метод вызывает функцию (функцию обратного вызова) один раз для каждого элемента массива. 12345678910111213141516171819&lt;p&gt;Calls a function once for each array element.&lt;&#x2F;p&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;var txt &#x3D; &quot;&quot;;var numbers &#x3D; [45, 4, 9, 16, 25];numbers.forEach(myFunction);document.getElementById(&quot;demo&quot;).innerHTML &#x3D; txt;function myFunction(value, index, array) &#123; txt &#x3D; txt + value + &quot;&lt;br&gt;&quot;; &#125;&lt;&#x2F;script&gt;&#x2F;&#x2F; 45&#x2F;&#x2F; 4&#x2F;&#x2F; 9&#x2F;&#x2F; 16&#x2F;&#x2F; 25 Обратите внимание, что функция принимает 3 аргумента: Стоимость товара Предметный указатель Сам массивПример можно переписать так:12345678910111213141516171819&lt;p&gt;Calls a function once for each array element.&lt;&#x2F;p&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;var txt &#x3D; &quot;&quot;;var numbers &#x3D; [45, 4, 9, 16, 25];numbers.forEach(myFunction);document.getElementById(&quot;demo&quot;).innerHTML &#x3D; txt;function myFunction(value) &#123; txt &#x3D; txt + value + &quot;&lt;br&gt;&quot;; &#125;&lt;&#x2F;script&gt;&#x2F;&#x2F; 45&#x2F;&#x2F; 4&#x2F;&#x2F; 9&#x2F;&#x2F; 16&#x2F;&#x2F; 25 Array.map ()map() Метод создает новый массив, выполняя функцию для каждого элемента массива. map() Метод не выполняет функцию для элементов массива без значений. map() Метод не изменяет исходный массив. Этот пример умножает каждое значение массива на 2: 1234567891011121314&lt;p&gt;Creates a new array by performing a function on each array element.&lt;&#x2F;p&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;var numbers1 &#x3D; [45, 4, 9, 16, 25];var numbers2 &#x3D; numbers1.map(myFunction);document.getElementById(&quot;demo&quot;).innerHTML &#x3D; numbers2;function myFunction(value, index, array) &#123; return value * 2;&#125;&lt;&#x2F;script&gt; &#x2F;&#x2F;90,8,18,32,50 функция принимает 3 аргумента: Стоимость товара Предметный указатель Сам массивКогда функция обратного вызова использует только параметр value, параметры index и array могут быть опущены:1234567891011121314&lt;p&gt;Creates a new array by performing a function on each array element.&lt;&#x2F;p&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;var numbers1 &#x3D; [45, 4, 9, 16, 25];var numbers2 &#x3D; numbers1.map(myFunction);document.getElementById(&quot;demo&quot;).innerHTML &#x3D; numbers2;function myFunction(value) &#123; return value * 2;&#125; &lt;&#x2F;script&gt; &#x2F;&#x2F;90,8,18,32,50 Array.filter ()filter() Метод создает новый массив с элементами массива, проходит тест. В этом примере создается новый массив из элементов со значением больше 18: 1234567891011121314&lt;p&gt;Creates a new array with all array elements that passes a test.&lt;&#x2F;p&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;var numbers &#x3D; [45, 4, 9, 16, 25];var over18 &#x3D; numbers.filter(myFunction);document.getElementById(&quot;demo&quot;).innerHTML &#x3D; over18;function myFunction(value, index, array) &#123; return value &gt; 18;&#125;&lt;&#x2F;script&gt; &#x2F;&#x2F;45,25 1234567891011121314&lt;p&gt;Creates a new array with all array elements that passes a test.&lt;&#x2F;p&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;var numbers &#x3D; [45, 4, 9, 16, 25];var over18 &#x3D; numbers.filter(myFunction);document.getElementById(&quot;demo&quot;).innerHTML &#x3D; over18;function myFunction(value) &#123; return value &gt; 18; &#x2F;&#x2F;45,25&#125;&lt;&#x2F;script&gt; Array.reduce ()reduce() Метод запускает функцию для каждого элемента массива , чтобы произвести (уменьшить его до) одно значение. reduce() Метод работает слева направо в массиве. Смотрите также reduceRight(). reduce()Метод не уменьшает исходный массив. Этот пример находит сумму всех чисел в массиве: 1234567891011121314&lt;p&gt;This example finds the sum of all numbers in an array:&lt;&#x2F;p&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;var numbers &#x3D; [45, 4, 9, 16, 25];var sum &#x3D; numbers.reduce(myFunction);document.getElementById(&quot;demo&quot;).innerHTML &#x3D; &quot;The sum is &quot; + sum;function myFunction(total, value, index, array) &#123; return total + value;&#125;&lt;&#x2F;script&gt; &#x2F;&#x2F;The sum is 99 функция принимает 4 аргумента Итого (начальное значение / ранее возвращенное значение) Стоимость товара Предметный указатель Сам массивВ приведенном выше примере не используются параметры индекса и массива.1234567891011121314&lt;p&gt;This example finds the sum of all numbers in an array:&lt;&#x2F;p&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;var numbers &#x3D; [45, 4, 9, 16, 25];var sum &#x3D; numbers.reduce(myFunction);document.getElementById(&quot;demo&quot;).innerHTML &#x3D; &quot;The sum is &quot; + sum;function myFunction(total, value) &#123; return total + value;&#125;&lt;&#x2F;script&gt; reduce()Метод может принимать начальное значение:1234567891011121314&lt;p&gt;This example finds the sum of all numbers in an array:&lt;&#x2F;p&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;var numbers &#x3D; [45, 4, 9, 16, 25];var sum &#x3D; numbers.reduce(myFunction, 100);document.getElementById(&quot;demo&quot;).innerHTML &#x3D; &quot;The sum is &quot; + sum;function myFunction(total, value) &#123; return total + value; &#x2F;&#x2F;The sum is 199&#125;&lt;&#x2F;script&gt; Array.reduceRight ()reduceRight() Метод запускает функцию для каждого элемента массива , чтобы произвести (уменьшить его до) одно значение. В reduceRight() работах от справа налево в массиве. Смотрите также reduce(). reduceRight() Метод не уменьшает исходный массив. пример находит сумму всех чисел в массиве: 1234567891011121314&lt;p&gt;This example finds the sum of all numbers in an array:&lt;&#x2F;p&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;var numbers &#x3D; [45, 4, 9, 16, 25];var sum &#x3D; numbers.reduceRight(myFunction);document.getElementById(&quot;demo&quot;).innerHTML &#x3D; &quot;The sum is &quot; + sum;function myFunction(total, value, index, array) &#123; return total + value;&#125;&lt;&#x2F;script&gt; &#x2F;&#x2F;The sum is 99 функция принимает 4 аргумента: Итого (начальное значение / ранее возвращенное значение) Стоимость товара Предметный указатель Сам массив1234567891011121314&lt;p&gt;This example finds the sum of all numbers in an array:&lt;&#x2F;p&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;var numbers &#x3D; [45, 4, 9, 16, 25];var sum &#x3D; numbers.reduceRight(myFunction);document.getElementById(&quot;demo&quot;).innerHTML &#x3D; &quot;The sum is &quot; + sum;function myFunction(total, value) &#123; return total + value;&#125;&lt;&#x2F;script&gt; &#x2F;&#x2F;The sum is 99 Array.every ()every() Проверка метода , если все значения массива пройти тест. В этом примере проверьте, все ли значения массива больше 18: 1234567891011121314&lt;p&gt;The every() method checks if all array values pass a test.&lt;&#x2F;p&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;var numbers &#x3D; [45, 4, 9, 16, 25];var allOver18 &#x3D; numbers.every(myFunction);document.getElementById(&quot;demo&quot;).innerHTML &#x3D; &quot;All over 18 is &quot; + allOver18;function myFunction(value, index, array) &#123; return value &gt; 18;&#125;&lt;&#x2F;script&gt; &#x2F;&#x2F;All over 18 is false Array.some ()some()Проверка метода , если некоторые значения массива пройти тест. пример проверки, если некоторые значения массива больше 18: 1234567891011121314&lt;p&gt;The some() method checks if some array values pass a test.&lt;&#x2F;p&gt;&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;var numbers &#x3D; [45, 4, 9, 16, 25];var someOver18 &#x3D; numbers.some(myFunction);document.getElementById(&quot;demo&quot;).innerHTML &#x3D; &quot;Some over 18 is &quot; + someOver18;function myFunction(value, index, array) &#123; return value &gt; 18;&#125;&lt;&#x2F;script&gt; &#x2F;&#x2F;Some over 18 is true Array.indexOf ()indexOf()Метод ищет массив для значения элемента и возвращает его позицию.Поиск в массиве для элемента «Apple»: 12345678910&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;&lt;script&gt;var fruits &#x3D; [&quot;Apple&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];var a &#x3D; fruits.indexOf(&quot;Apple&quot;);document.getElementById(&quot;demo&quot;).innerHTML &#x3D; &quot;Apple is found in position &quot; + a;&lt;&#x2F;script&gt; &#x2F;&#x2F;Apple is found in position 0&lt;p&gt;The indexOf() does not work in Internet Explorer 8 and earlier versions.&lt;&#x2F;p&gt; Синтаксис 1array.indexOf(item, start) itemпункт Обязательный. Элемент для поиска. startначать Необязательными. С чего начать поиск. Отрицательные значения начнутся с заданной позиции, начиная с конца, и начнут поиск до конца. Array.indexOf() возвращает -1, если элемент не найден. Если элемент присутствует более одного раза, он возвращает позицию первого вхождения. Array.lastIndexOf ()Array.lastIndexOf() такой же, как Array.indexOf(), но возвращает позицию последнего вхождения указанного элемента. Поиск в массиве для элемента «Apple»: 12345&lt;script&gt;var fruits &#x3D; [&quot;Apple&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];var a &#x3D; fruits.lastIndexOf(&quot;Apple&quot;);document.getElementById(&quot;demo&quot;).innerHTML &#x3D; &quot;Apple is found in position &quot; + (a + 1); &#x2F;&#x2F;Apple is found in position 3&lt;&#x2F;script&gt; Array.find ()find() Метод возвращает значение первого элемента массива , который проходит тестовую функцию. пример находит (возвращает значение) первый элемент, который больше 18: 12345678910&lt;script&gt;var numbers &#x3D; [4, 9, 16, 25, 29];var first &#x3D; numbers.find(myFunction);document.getElementById(&quot;demo&quot;).innerHTML &#x3D; &quot;First number over 18 is &quot; + first;function myFunction(value, index, array) &#123; return value &gt; 18;&#125;&lt;&#x2F;script&gt; &#x2F;&#x2F;First number over 18 is 25 Array.findIndex ()findIndex() Метод возвращает индекс первого элемента массива , который проходит тестовую функцию. Этот пример находит индекс первого элемента, который больше 18: 12345678910&lt;script&gt;var numbers &#x3D; [4, 9, 16, 25, 29];var first &#x3D; numbers.findIndex(myFunction);document.getElementById(&quot;demo&quot;).innerHTML &#x3D; &quot;First number over 18 has index &quot; + first;function myFunction(value, index, array) &#123; return value &gt; 18;&#125;&lt;&#x2F;script&gt; &#x2F;&#x2F;First number over 18 has index 3"}],"posts":[{"title":"home","slug":"home","date":"2020-03-05T15:30:03.000Z","updated":"2020-04-08T12:49:05.583Z","comments":true,"path":"home/","link":"","permalink":"https://anastabest.github.io/mysite/home/","excerpt":"","text":"Этот блог создается для суммирования пройденного мной материала JAVA SCRIPT Скриптовый языкСкриптова мова (англ. scripting language) — мова програмування, розроблена для запису «сценаріїв», послідовностей операцій, які користувач може виконувати на комп’ютері. Динамі́чна мо́ва!Динамі́чна мо́ва дозволяє визначати типи даних і здійснювати синтаксичний аналіз і компіляцію «на льоту», безпосередньо на етапі виконання.","categories":[],"tags":[]},{"title":"menu","slug":"menu","date":"2020-03-05T15:30:03.000Z","updated":"2020-04-30T11:39:52.631Z","comments":true,"path":"menu/","link":"","permalink":"https://anastabest.github.io/mysite/menu/","excerpt":"","text":"MENU WEBSITEJAVA SCRIPT JS About JS Functions JS Display JS Statements JS Keywords JS Values JS Data Types JS Arrays JS Objects JS Events JS Strings JS String Methods JS Numbers JS Number Methods JS Array Methods JS Сортировка Массивов JS Итерация Массива JS Даты JS Формат Даты JS Методы Получения Даты JS Методы Установки Даты JS Математический Объект JS Случайный JS Булевые JS Сравнения JS Условия JS Switch Переключатель JS Break Continue JS Type Conversion Преобразование JS Bitwise JS Регулярные Выражения HEXO diploy.git RANDOM NOTES random notes ADMIN","categories":[],"tags":[]},{"title":"learning","slug":"index","date":"2020-02-25T16:46:55.000Z","updated":"2020-03-19T23:06:03.147Z","comments":true,"path":"index/","link":"","permalink":"https://anastabest.github.io/mysite/index/","excerpt":"","text":"Hello my frends!","categories":[],"tags":[]}]}